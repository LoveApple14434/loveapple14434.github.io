<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>LoveApple14434的主页</title>
    <link>https://loveapple.icu/</link>
    
    <atom:link href="https://loveapple.icu/rss.xml" rel="self" type="application/rss+xml"/>
    
    <description>射频电子|信息技术|生活记录</description>
    <pubDate>Thu, 23 Oct 2025 02:37:22 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>数字系统II第一次实验报告</title>
      <link>https://loveapple.icu/loongarch-linux-1/</link>
      <guid>https://loveapple.icu/loongarch-linux-1/</guid>
      <pubDate>Thu, 23 Oct 2025 02:32:17 GMT</pubDate>
      
      <description>这是一篇关于在龙芯2K1000LA开发板上进行嵌入式Linux开发实践的详细实验报告。文章记录了从环境搭建、内核编译、文件系统制作到交叉编译工具链使用的完整流程，并分享了实验过程中遇到的问题与解决方案。</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="实验目的">实验目的</h1><ul><li><p>了解嵌入式开发环境，掌握内核的下载与启动过程</p></li><li><p>了解Linux内核编译过程，学会配置内核编译选项与内核剪裁等</p></li><li><p>了解Linux文件系统的制作、烧录与挂载等</p></li><li><p>掌握交叉编译工具链的使用，了解上位机/目标机概念</p></li></ul><h1 id="实验环境">实验环境</h1><p>实验基于Loongarch架构的龙芯教育派开发板平台，芯片为龙芯2k1000LA，Loongarch架构。上位机环境为Ubuntu20.04，配备交叉编译工具链与minicom串口调试工具。</p><h1 id="实验过程">实验过程</h1><h2 id="在目标机上烧录linux并挂载文件系统">在目标机上烧录Linux并挂载文件系统</h2><p>本节中暂不讨论Linux内核的编译与文件系统的制作过程，直接使用实验提供的内核镜像与文件系统镜像进行烧录与挂载。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ ifconfig  <span class="comment"># 查看本机IP地址，这里我的机器上是192.168.208.22</span></span><br><span class="line">$ minicom <span class="comment"># 启动串口，按开发板重启按钮</span></span><br><span class="line"><span class="comment"># 等待出现“Press 'c' to command-line”提示时按c键进入PMON环境</span></span><br><span class="line">PMON&gt; ifconfig syn0 192.168.208.122  </span><br><span class="line"><span class="comment"># 根据实验室环境，开发板地址可设为对应上位机地址+100，避免冲突</span></span><br><span class="line">PMON&gt; load tftp://192.168.208.22/vmlinuz  <span class="comment"># 下载内核镜像</span></span><br><span class="line">PMON&gt; initrd tftp://192.168.208.22/ramdisk_loongarch.cpio.gz </span><br><span class="line"><span class="comment"># 为龙芯开发板提供的RAMFS文件系统</span></span><br><span class="line">PMON&gt; g console=ttyS0,115200 rdinit=/sbin/init </span><br><span class="line"><span class="comment"># 启动内核，指定控制台端口与波特率，指定起始位置</span></span><br></pre></td></tr></table></figure><p>接下来会出现提示<code>Please press Enter to activate this console</code>，我们按提示按Enter键即可进入开发板上的Linux环境。</p><h2 id="体验交叉编译工具链">体验交叉编译工具链</h2><p>上位机环境为x86架构的Ubuntu系统，而目标机环境为Loongarch架构的Linux系统，虽然C语言编写一些简单的程序（比如HelloWorld）时，需要写的具体代码与架构无关，但是在不同的架构上肯定不能运行同一个程序，其中的关键就是把代码翻译成程序的编译过程。在上位机上编写程序，并编译成可以在目标机上运行的程序，这个过程就是交叉编译，使用的编译工具链就是交叉编译工具链。</p><p>在实验室的Ubuntu上位机上预装了针对Loongarch-GNU-Linux的交叉工具链，位于<code>/opt/cross-tools</code>路径下。首先我们把工具链路径添加到上位机的PATH环境变量中，这样每次调用就不用输入完整路径了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">export</span> PATH=/opt/cross-tools/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><p>编写一个简单的hello.c文件</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> {</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Hello from NJU!\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>接下来分别用默认工具链和交叉编译工具链编译出两份不同的程序。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ gcc ./hello.c -o ./hello_x86 </span><br><span class="line"><span class="comment"># 这里使用的是上位机Ubuntu系统安装时自带的gcc工具链</span></span><br><span class="line">$ loongarch64-linux-gnu-gcc ./hello.c -o ./hello_arch </span><br><span class="line"><span class="comment"># 这里使用的是/opt/cross-tools/bin中的工具链</span></span><br><span class="line">$ <span class="built_in">cp</span> ./hello_arch /srv/nfs4/loveapple/</span><br><span class="line">$ <span class="built_in">cp</span> ./hello_x86 /srv/nfs4/loveapple/ </span><br><span class="line"><span class="comment"># 将编译出的程序拷贝到/srv/nfs4中的一个自建文件夹里</span></span><br><span class="line"><span class="comment">#以方便目标机上的Linux挂载网络文件系统并执行程序</span></span><br></pre></td></tr></table></figure><p>在上位机上分别尝试执行两个程序。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ./hello_x86</span><br><span class="line">Hello from NJU!</span><br><span class="line">$ ./hello_arch</span><br><span class="line">bash: cannot execute binary file: Exec format error</span><br></pre></td></tr></table></figure><p>这里由于hell_arch是使用交叉工具链编译，适用于loongarch架构上运行的，所以运行时会产生报错。我们像之前所说在开发板上启动Linux系统，然后按如下步骤设置IP地址并挂载网络文件系统服务（NFS,Network File System）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; ifconfig eth0 192.168.208.122</span><br><span class="line">&gt; mount -t nfs 192.168.208.22:/mnt/nfs4/loveapple /mnt/loveapple</span><br><span class="line">&gt; <span class="built_in">ls</span> /mnt/loveapple -l</span><br></pre></td></tr></table></figure><p>这里我们可以看到命令前面的引导符号不是$而是#，这是因为我们处在root用户环境下。</p><p>执行ls命令后，此时应该能看见之前在上位机上放入的两个程序，我们来尝试运行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/ &gt; <span class="built_in">cd</span> /mnt/loveapple</span><br><span class="line">/mnt/loveapple &gt; ./hello_x86</span><br><span class="line">./hello_x86: line 13: ????B???: not found</span><br><span class="line">./hello_x86: line 0: ? not found</span><br><span class="line">./hello_x86: line 1: ELF???? not found</span><br><span class="line">./hello_x86: line 15: syntax error: unexpected <span class="string">"("</span></span><br><span class="line"></span><br><span class="line">/mnt/loveapple &gt; ./hello_arch</span><br><span class="line">Hello from NJU!</span><br></pre></td></tr></table></figure><p>这里执行为x86编译的可执行文件时，会报错，而执行为loongarch编译的可执行文件时，则可正常执行。所谓交叉编译，就是在上位机上对程序代码进行编写开发，使用交叉工具链进行编译，从而传递给目标机进行执行。</p><h2 id="编译linux内核">编译Linux内核</h2><p>Linux内核是开源的，一般来说可从网络上进行下载，这里由于实验室是内网环境，我们改为从教师机上使用基于ssh链接的scp工具获取Linux内核源码。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">mkdir</span> -p ~/loveapple/core</span><br><span class="line">$ <span class="built_in">cd</span> ~/loveapple/core <span class="comment"># 使用自建的目录，与其他同学区分</span></span><br><span class="line">$ ssh student@192.168.208.22</span><br><span class="line">$ <span class="built_in">ls</span> ~ </span><br><span class="line"><span class="comment"># 先使用ssh登录到教师机上，用ls命令查看有那些文件，以方便scp下载指定路径</span></span><br><span class="line"><span class="comment"># 这里发现~（即/home/student）路径下有ramdisk_img.gz，ramdisk_loong.cpio.gz，busybox-1.29.2.tar.gz，linux_4.19.190.7.9.orig.tar.gz这几个比较有用的文件</span></span><br><span class="line">$ <span class="built_in">exit</span></span><br><span class="line">$ scp student@192.168.208.88:~/linux_4.19.190.7.9.orig.tar.gz .</span><br><span class="line"> <span class="comment">#将教师机上的文件通过scp目录拷贝到当前路径</span></span><br><span class="line">$ tar -zxvf ./linux_4.19.190.7.9.orig.tar.gz <span class="comment"># tar命令解压</span></span><br><span class="line">$ <span class="built_in">cd</span> ./linux_4.19.190.7.9</span><br></pre></td></tr></table></figure><p>这里我们成功进入了存放Linux内核源码的文件夹。在该文件夹中有Makefile文件规定可执行的<code>make</code>指令。这里为了交叉编译，我们首先要为make环境设置对应的环境变量<code>ARCH</code>与<code>CROSS_COMPILE</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">export</span> ARCH=loongarch</span><br><span class="line">$ <span class="built_in">export</span> CROSS_COMPILE=loongarch64-linux-gnu-</span><br></pre></td></tr></table></figure><p>这里<code>ARCH</code>指定了编译目标的架构，而<code>CROSS_COMPILE</code>指定了工具链的前缀，后缀则为GNU工具链统一的<code>gcc</code>，<code>as</code>，<code>ar</code>等等工具名称。通过<code>export</code>设置的环境变量不具有永久性，仅对当前会话有效，因此每次重新启动bash时，都需要重新<code>export</code>一次。</p><p>Linux内核编译时可选的配置选项很多，这里我们首先加载一下对这套板卡的缺省配置（defconfig）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ make loongson_2k1000_defconfig</span><br></pre></td></tr></table></figure><p>接下来，还有很多可以自定义的配置项，我们可以使用menuconfig图形化界面加以配置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ make menuconfig</span><br></pre></td></tr></table></figure><p>修改好配置之后，就可以进行编译了。可以用-j选项指定编译的线程数，加快编译进度。目标为vmlinuz内核文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ make -j8 vmlinuz</span><br></pre></td></tr></table></figure><p>编译完成之后，我们在tftpboot文件夹下新建一个自己的文件夹，依然是与其他同学做出区分，然后将编译好的vmlinuz文件拷贝的该文件夹下，这样之后就可以通过tftp协议来load自己的内核了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">mkdir</span> /srv/tftpboot/loveapple</span><br><span class="line">$ <span class="built_in">cp</span> ./vmlinuz /srv/tftpboot/loveapple/vmlinuz_0909</span><br></pre></td></tr></table></figure><h2 id="制作文件系统">制作文件系统</h2><p>一般的文件系统需要的硬件资源比较多，这里我们选择可统一编译的轻量化的文件系统busybox。</p><p>之前ssh登录教师机时已经看到教师机上有busybox的压缩包，我们依然是使用scp命令传输下来。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">mkdir</span> ~/loveapple/busybox</span><br><span class="line">$ <span class="built_in">cd</span> ~/loveapple/busybox</span><br><span class="line">$ scp student@192.168.208.88:~/busybox-1.29.2.tar.gz</span><br><span class="line">$ tar -zxvf ./busybox-1.29.2.tar.gz</span><br><span class="line">$ <span class="built_in">cd</span> ./busybox-1.29.2</span><br></pre></td></tr></table></figure><p>之前已经export过相应的环境变量了，这里如果没有重启过bash会话的话，可以不重新export，直接进行设置、编译与安装。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ make defconfig</span><br><span class="line">$ make menuconfig <span class="comment"># 这里我推荐勾选Settings-&gt;Build Options-&gt;Build static binary (no shared libs)</span></span><br><span class="line">$ make -j8</span><br><span class="line">$ make install</span><br></pre></td></tr></table></figure><p>如果没有特殊配置过安装路径的话，<code>make install</code>会默认将busybox安装于<code>./_install</code>下。</p><p>接下来我们还要对这个新系统做一些修改，规定一些启动时的初始化行为。在之前启动时的<code>g</code>命令中，我们曾规定过<code>rdinit=/sbin/init</code>，这是Linux内核启动并挂载文件系统后自动执行的脚本。虽然这个脚本是busybox编译安装时就自动生成的，但是我们依然还需要做出一些额外的配置。在_install文件夹下新建一个<code>/etc</code>目录，在该目录中新建<code>inittab</code>,<code>rc</code>,<code>motd</code>三个文件。接下来一定要注意，在提及这个etc目录时，一定要使用<code>./etc/</code>，而非<code>/etc/</code>（会指向上位机自己的etc文件夹）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ./_install</span><br><span class="line">$ <span class="built_in">mkdir</span> etc</span><br><span class="line">$ vim ./etc/inittab <span class="comment"># 随后编辑inittab文件</span></span><br><span class="line">$ vim ./etc/rc <span class="comment"># 随后编辑rc文件</span></span><br><span class="line">$ <span class="built_in">chmod</span> +x ./etc/rc 给rc文件赋予可执行权限</span><br><span class="line">$ vim ./etc/motd <span class="comment"># 随后编辑motd文件</span></span><br></pre></td></tr></table></figure><p><code>inittab</code>是初始化系统设置的关键配置文件，比如系统初始化过程，执行脚本所用的解释器，关机对应的指令等等。我编写的<code>inittab</code>内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># /etc/inittab</span></span><br><span class="line"></span><br><span class="line">::sysinit:/etc/init.d/rcS</span><br><span class="line">::askfirst:-/bin/sh</span><br><span class="line"></span><br><span class="line">::ctrlaltdel:/sbin/reboot</span><br><span class="line">::shutdown:/bin/umount -a -r</span><br></pre></td></tr></table></figure><p><code>rc</code>文件则是刚刚我们规定的<code>/etc/init.d/rcS</code>软连接到的真正脚本文件。因此我们还要进行<code>rcS</code>到<code>rc</code>的软连接。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">mkdir</span> ./etc/init.d</span><br><span class="line">$ <span class="built_in">ln</span> -s ./etc/rc ./etc/init.d/rcS</span><br></pre></td></tr></table></figure><p>我编写的<code>rc</code>文件如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">hostname Loongson</span><br><span class="line">mount -t proc proc /proc</span><br><span class="line">mount -t sysfs sysfs /sys</span><br><span class="line"><span class="built_in">cat</span> /etc/motd</span><br><span class="line"></span><br><span class="line"><span class="comment">#ifconfig eth0 192.168.208.123</span></span><br><span class="line"><span class="built_in">mkdir</span> /LoveApple</span><br><span class="line"><span class="comment">#mount 192.168.208.22:/srv/nfs4/loveapple /LoveApple -o nolock,proto=tcp</span></span><br></pre></td></tr></table></figure><p>最后三行我本来适用于自动执行NFS挂载操作的，但是实测发现<code>rc</code>脚本执行太早，网卡还没有配置好就尝试执行这几条指令了，导致NFS挂载失败并在控制台中弹出报错，于是我便注释掉了两句，只留下了创建文件夹的语句。</p><p>最后是<code>motd</code>文件(<strong>M</strong>essage<strong>O</strong>f<strong>T</strong>o<strong>D</strong>ay)，我们在<code>rc</code>中让脚本<code>cat</code>出这个文件的内容，因此我们在<code>motd</code>中写的内容会在系统启动时显示，类似于一个标识。这里我编写的<code>motd</code>文件如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">===================================</span><br><span class="line">     Welcome to Linux World!       </span><br><span class="line">===================================</span><br><span class="line">    Ported by LoveApple 14434      </span><br><span class="line">===================================</span><br><span class="line">Say Hello to Everybody! Love U All!</span><br><span class="line">===================================</span><br></pre></td></tr></table></figure><p>接下来我们将编译出的ramdisk_img挂载，并将_install文件夹中安装的文件复制到挂载点中，最后制作归档文件，以方便目标机通过tftp加载。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ mount ramdisk_img <span class="comment"># 根据/etc/fstab的配置，会将ramdisk_img挂载到/mnt/ramdisk/下</span></span><br><span class="line">$ <span class="built_in">cp</span> ./_install/* /mnt/ramdisk/ -r</span><br><span class="line">$ <span class="built_in">cd</span> /mnt/ramdisk/</span><br><span class="line">$ find . | cpio -H newc -o | gzip -9 &gt; /srv/tftpboot/loveapple/initrd_0916.cpio.gz <span class="comment"># 直接放入tftp文件夹即可</span></span><br><span class="line">$ <span class="built_in">cd</span> -</span><br><span class="line">$ umount /mnt/ramdisk <span class="comment"># 及时卸载挂载点</span></span><br></pre></td></tr></table></figure><p>然后按第一小节所述进入开发板的PMON环境，加载我们自己编译的内核与文件系统。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PMON&gt; ifconfig syn0 192.168.208.122</span><br><span class="line">PMON&gt; load tftp://192.168.208.22/loveapple/vmlinuz_0909</span><br><span class="line">PMON&gt; initrd tftp://192.168.208.22/loveapple/initrd_0916.cpio.gz</span><br><span class="line">PMON&gt; g console=ttyS0,115200 rdinit=/sbin/init</span><br></pre></td></tr></table></figure><p>注意这里我们的文件是存放在<code>/srv/tftpboot</code>底下的子文件夹里的，使用tftp协议传输时要输入相对路径。稍等几秒让Linux内核与文件系统启动，我们就可以第一次看到我们自己编译的内核与文件系统了。</p><h2 id="制作动态链接库">制作动态链接库</h2><p>前面编译安装busybox时我们选择构建静态二进制文件，不使用sharedlibs。这为我们省去了拷贝动态链接库的烦恼，但是也会让之后我们在目标机上运行其他需要动态链接库的程序遇到一些困难。接下来我们介绍一下使用动态链接库的办法。</p><p>进入到busybox的源码文件夹，使用如下命令查看busybox需要的动态链接器与共享库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ readelf -l busybox | grep interpreter</span><br><span class="line">$ readelf -d busybox | grep NEEDED</span><br></pre></td></tr></table></figure><p>为了存放链接器与共享库，我们需要在<code>/usr/</code>下建立<code>lib/</code>与<code>lib64/</code>文件夹，还需要在根目录建立<code>/lib64/</code>文件夹，并从交叉工具链附带的库文件中将这些链接器与共享库文件拷贝过来。注意上面命令所列出的链接器与共享库均为软链接，不能直接拷贝，而要用<code>ls -l</code>指令看到具体的链接关系，并拷贝其对应的目标文件，再手动建立相应的软链接关系。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ./_install</span><br><span class="line">$ <span class="built_in">mkdir</span> -p /usr/lib64</span><br><span class="line">$ <span class="built_in">mkdir</span> /usr/lib</span><br><span class="line">$ <span class="built_in">ln</span> -s /usr/lib64 ./lib64</span><br><span class="line">$ <span class="built_in">ls</span> -l /opt/cross-tools/loongarch64-linux-gnu/sysroot/lib64</span><br><span class="line">$ <span class="built_in">cp</span> /opt/cross-tools/loongarch64-linux-gnu/sysroot/lib64/{ld-2.28.so, libc-2.28.so, libm-2.28.so, libresolv-2.28.so} ./usr/lib64</span><br><span class="line">$ <span class="built_in">cd</span> ./usr/lib64</span><br><span class="line">$ <span class="built_in">ln</span> -s ld-2.28.so ld.so.1</span><br><span class="line">$ <span class="built_in">ln</span> -s libc-2.28.so libc.so.6</span><br><span class="line">$ <span class="built_in">ln</span> -s libm-2.28.so libm.so.6</span><br><span class="line">$ <span class="built_in">ln</span> -s libresolv-2.28.so libresolv.so.2</span><br></pre></td></tr></table></figure><p>接下来我们再像之前一样重新制作一个归档文件(<code>.cpio.gz</code>)，并在开发板上启动，实验效果与之前相同，但是新启动的文件系统中有<code>lib64</code>与其具体内容。</p><h1 id="遇到的问题与感悟">遇到的问题与感悟</h1><ul><li><p>在开发板上执行命令是使用串口（通过USB连接到上位机）进行数据传输，但是<code>load</code>与<code>initrd</code>指令通过<code>tftp</code>服务传输文件要借助网络。当<code>load</code>或<code>initrd</code>命令没有反应时，首先检查开发板有没有插上网线，其次通过<code>ping</code>命令检查网络是否通畅，再其次检查<code>tftp://\&lt;IP\&gt;/</code>后面的路径与文件名是否正确。正常来说如果命令正确执行并正在加载时，会出现一串16进制数字，一个括号包裹的文件类型（(ELF)或(BIN)），以及一个会转圈的字符（轮流显示|/-）。</p></li><li><p>在上位机开发时，如果要进行文件夹切换，如果不记得每一级文件夹的结构，比如其目录下有什么子目录与文件名之类的，不需要一点点<code>cd</code>一点点<code>ls</code>，而可以<code>cd &lt;部分路径&gt;</code>然后按tab键，Ubuntu会把可能的补全列在下面，并且保留你已经输入过的命令部分。善用tab补全可以节省很多手打文件名的烦恼，也可以避免不少输入错误导致的问题。</p></li><li><p>当命令执行失败或者遇到系统无法启动之类的问题时，可以认真看看报错信息。</p></li><li><p>当我第一次从构建静态二进制文件转为使用动态共享链接库时，一直给我报错说找不到<code>libm.so.6</code>，但是我明明拷贝了文件并建立了软链接。后来发现是<code>/usr</code>底下少建立了<code>/lib</code>文件夹。</p></li><li><p>我尝试把文件系统的归档文件整合进内核编译过程中，首先把<code>initrd.cpio.gz</code>文件拷贝到Linux编译的文件夹中，然后<code>make menuconfig</code>并在相关设置中制定RAMFS的文件路径，保存退出，重新<code>make -j8</code>，生成新的vmlinuz内核，当我尝试仅<code>load</code>这个vmlinuz内核并尝试用<code>g</code>命令启动时，会与之前正确步骤中一样输出一大堆调试信息，但是缺少<code>Press Enter to enable this console</code>提示，个人推测是内核和文件系统都成功加载了，但是console指定有问题，或者是启动脚本的路径没有正确被找到。由于实验时间限制，尚未解决这一问题。</p></li></ul><h1 id="实验总结">实验总结</h1><p>本次实验基于龙芯2K1000LA开发板，系统地完成了嵌入式Linux开发环境的搭建与核心流程的实践。通过本次实验，我主要获得了以下收获：</p><ul><li><p><strong>掌握了嵌入式Linux开发的基本流程</strong>：亲身体验了从内核配置编译、文件系统制作到最终烧录启动的完整过程，对嵌入式系统的组成和启动流程有了直观且深入的理解。</p></li><li><p><strong>理解了交叉编译的核心概念</strong>：通过在上位机（x86）编译出能在目标机（LoongArch）上运行的程序，深刻体会了交叉编译工具链在跨平台开发中的关键作用，以及不同架构下二进制文件的不可兼容性。</p></li><li><p><strong>提升了问题分析与解决能力</strong>：在实验过程中，遇到了如tftp加载失败、动态链接库缺失、文件系统启动异常等问题。通过分析错误信息、检查网络配置和文件路径，我学会了系统地排查和解决问题的方法，并认识到启动脚本执行时机的重要性。</p></li><li><p><strong>熟悉了关键工具的使用</strong>：熟练掌握了menuconfig进行内核剪裁、BusyBox构建轻量级文件系统、以及使用cpio和gzip制作根文件系统镜像等核心技能。</p></li></ul><p>总而言之，本实验不仅让我掌握了具体的操作技能，更重要的是建立了对嵌入式系统”自上而下”的整体认识，为后续更深层次的嵌入式开发打下了坚实的基础。</p><h1 id="实验过程照片">实验过程照片</h1><p>由于实验上位机不连接外网，不方便截图传输到个人电脑上，因此这里均使用手机拍屏而非截屏。所幸照片仅作为实验过程的证据，而非实验过程的描述，相对而言不算特别关键。</p><figure><img src="/loongarch-linux-1/1.jpg" alt="PMON环境启动"><figcaption aria-hidden="true">PMON环境启动</figcaption></figure><p><img src="/loongarch-linux-1/2.jpg" alt="PMON环境下配置网络"> <img src="/loongarch-linux-1/3.jpg" alt="在开发板上启动现成的Linux内核与文件系统"></p><figure><img src="/loongarch-linux-1/4.jpg" alt="在上位机上运行两种程序的不同结果"><figcaption aria-hidden="true">在上位机上运行两种程序的不同结果</figcaption></figure><figure><img src="/loongarch-linux-1/5.jpg" alt="在目标机上运行两种程序的不同结果"><figcaption aria-hidden="true">在目标机上运行两种程序的不同结果</figcaption></figure><figure><img src="/loongarch-linux-1/6.jpg" alt="下载Linux内核压缩包并解压"><figcaption aria-hidden="true">下载Linux内核压缩包并解压</figcaption></figure><figure><img src="/loongarch-linux-1/8.jpg" alt="安装busybox"><figcaption aria-hidden="true">安装busybox</figcaption></figure><figure><img src="/loongarch-linux-1/9.jpg" alt="制作ramdisk_img镜像"><figcaption aria-hidden="true">制作ramdisk_img镜像</figcaption></figure><figure><img src="/loongarch-linux-1/10.jpg" alt="编写Message of Today"><figcaption aria-hidden="true">编写Message of Today</figcaption></figure><figure><img src="/loongarch-linux-1/11.jpg" alt="第一次成功启动我自己的内核与文件系统"><figcaption aria-hidden="true">第一次成功启动我自己的内核与文件系统</figcaption></figure><figure><img src="/loongarch-linux-1/12.jpg" alt="在我自己的内核与文件系统上执行一些简单命令"><figcaption aria-hidden="true">在我自己的内核与文件系统上执行一些简单命令</figcaption></figure><figure><img src="/loongarch-linux-1/13.jpg" alt="将tftpboot中我的文件整合到一个单独目录中，并进行加载与启动"><figcaption aria-hidden="true">将tftpboot中我的文件整合到一个单独目录中，并进行加载与启动</figcaption></figure><figure><img src="/loongarch-linux-1/14.jpg" alt="在目标机上尝试新建用户与组，设置密码"><figcaption aria-hidden="true">在目标机上尝试新建用户与组，设置密码</figcaption></figure><figure><img src="/loongarch-linux-1/15.jpg" alt="目标机也要合理关机，不要粗暴拔电哦"><figcaption aria-hidden="true">目标机也要合理关机，不要粗暴拔电哦</figcaption></figure>]]></content:encoded>
      
      
      <category domain="https://loveapple.icu/categories/%E6%8A%80%E6%9C%AF%E5%AE%9E%E8%B7%B5/">技术实践</category>
      
      
      <category domain="https://loveapple.icu/tags/Linux/">Linux</category>
      
      <category domain="https://loveapple.icu/tags/%E5%BC%80%E5%8F%91%E6%9D%BF/">开发板</category>
      
      <category domain="https://loveapple.icu/tags/loongarch/">loongarch</category>
      
      
      <comments>https://loveapple.icu/loongarch-linux-1/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>举高高旋转小火锅评测</title>
      <link>https://loveapple.icu/jgg-hotpot/</link>
      <guid>https://loveapple.icu/jgg-hotpot/</guid>
      <pubDate>Wed, 15 Oct 2025 07:54:15 GMT</pubDate>
      
      <description>一篇来自旋转小火锅爱好者的探店评测。文章从价格、形式、锅底、小料台到菜品等多个维度，将新开的举高高与常见的龙歌等品牌进行了对比，并最终给出了个人评价与推荐理由。</description>
      
      
      
      <content:encoded><![CDATA[<p>一个也许并非众所周知的事实是，主包是一个旋转小火锅自助的狂热爱好者。最近仙林万达茂开业了新的举高高小火锅，据说是海底捞旗下品牌，那么主包作为旋转小火锅的一个手子肯定是要去品尝一下的了。</p><h2 id="价格">价格</h2><p>先看价位，59.9元，与龙歌的原价相同，略高于大成和宾来乐<del>（此处为珠江路宾来乐默哀三秒）</del>，但是龙歌可以在美团上买到50出头的团购券，而且吃多了之后可以用积分换半价券，我一般把龙歌认为是50左右的选择，而举高高在美团团购也是59.9并没有额外优惠，因此举高高暂登我吃过的旋转小火锅自助里面价格第一名。</p><h2 id="形式">形式</h2><p>十分值得一提的是，举高高的肉卷是放在冰柜里自取的，可以不用等传送带，想拿多少就拿多少，这一点还是非常好评的。不过我去的时候不知是因为时间比较晚（下午一点多）还是因为当时店里顾客比较多（一点钟居然还要排一个小队进场），冰柜里的肉卷补充并不是特别及时。不过总的来说，这个把肉卷单独放在冰柜里自取的做法我觉得还是非常值得称赞的。</p><p>另一个不同之处是大部分小火锅的锅是放进嵌入台面的槽位里进行加热的，而举高高的加热面板是与桌面平齐的，锅是完全在桌面以上的。这一点孰优孰劣我只能说见仁见智，我个人是比较喜欢嵌入桌面的设计的。</p><p>还有一个不同之处是大部分旋转小火锅的传送带上会放置加汤壶，让顾客自行加汤，而举高高的传送带上完全没有加汤壶，烧到汤比较少时，需要呼叫服务员帮忙加汤。当然，这是因为举高高会为不同的锅底加不同的汤，以免稀释风味。但是既然是去吃旋转小火锅的，我一般喜欢直接一人食，减少社交交流。这一点上孰优孰劣也是见仁见智。</p><h2 id="锅底">锅底</h2><p>锅底的设置上，辣锅部分审美比较重复，除了酸汤锅以外其他几个辣锅看起来都差不多。当然，也可能是因为龙歌的鲜椒锅给我的印象太过惊艳，而举高高没有类似的锅底，导致我对举高高的辣锅设置不是特别满意。不辣锅方面就是常见的番茄骨汤菌汤寿喜四兄弟，据网上评测说番茄锅非常好吃，想来海底捞本家的番茄锅确实就很不错所以也是理所当然。</p><h2 id="小料台">小料台</h2><p>比较普通的小料台，该有的调料基本都有，少见的特殊的调料也没有，平平无奇的水平。</p><h2 id="菜品">菜品</h2><p>个人感觉菜品水平基本跟龙歌差不多，优于大成/宾来乐的水平。可以扫码单点汉堡以及榴莲披萨，但是这两个单品我都不太感兴趣所以没点。旁边的同学点的汉堡看起来跟龙歌的差不多，榴莲披萨倒是非常有特色，别家没有，但是我不喜欢榴莲，于是作罢。</p><p>一个值得称赞的点是牛蛙切成了小块，而不是像龙歌那样一整只。首先就是一整只的牛蛙很难放进小火锅中（其实放进正常尺寸火锅里都有点勉强了，因为牛蛙放下去之后会伸直，<del>小伙直接立正了说是</del>），之前迟过龙歌一整只牛蛙，但是煮完了发现不太好吃，可能是因为冻了太久的原因，口感不够韧弹，而是有一种奇怪的纤维感。举高高这个牛蛙块首先是比较小，比较好掌握分量，口感上也没有特别奇怪的纤维感，不过还是没有牛蛙专门店那么好就是了。</p><p>至于自助小火锅最重要的肉卷部分，还是常见的肥牛卷/猪五花卷/乌鸡卷三兄弟，口味也是普通水平，我甚至十分怀疑这些不同品牌的肉卷是不是都是同一个供应商供的货，口感也太像了啊xd！</p><h2 id="总结">总结</h2><p>个人还是比较推荐这家举高高旋转自助小火锅的，虽然价格上比别家都要贵一点，但是菜品质量不错，而且肉卷可以冰柜自取，性价比这一块也不低。</p>]]></content:encoded>
      
      
      <category domain="https://loveapple.icu/categories/%E5%90%83%E5%90%83%E5%90%83/">吃吃吃</category>
      
      
      <category domain="https://loveapple.icu/tags/%E6%97%8B%E8%BD%AC%E5%B0%8F%E7%81%AB%E9%94%85/">旋转小火锅</category>
      
      <category domain="https://loveapple.icu/tags/%E5%90%83%E5%90%83%E5%90%83/">吃吃吃</category>
      
      
      <comments>https://loveapple.icu/jgg-hotpot/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>如何打好螺丝？</title>
      <link>https://loveapple.icu/how2b-screwer/</link>
      <guid>https://loveapple.icu/how2b-screwer/</guid>
      <pubDate>Thu, 09 Oct 2025 06:57:21 GMT</pubDate>
      
      <description>一篇来自电脑维修志愿者的经验分享，详细总结了笔记本电脑维修中会遇到的各种螺丝类型、其特性及安装注意事项，并提供了当遇到难拧或已拧花的螺丝时的实用处理技巧。</description>
      
      
      
      <content:encoded><![CDATA[<blockquote><p>笔记本维修就是打螺丝和插拔线。 ——匿名暴论</p></blockquote><p>在你社积累了两年的笔记本维修经验，我觉得是时候整理一下两年来打螺丝的经验，给大家讲讲怎么把螺丝打好了。</p><h2 id="分类">分类</h2><p>笔记本上的螺丝一般可以通过以下几种方式分类：</p><ul><li>直径</li><li>长度</li><li>头型</li><li>特殊设计（防脱螺丝、分段螺丝）</li></ul><h3 id="直径与长度">直径与长度</h3><p>我们经常在笔记本的主板上看见诸如<code>M2×3</code>之类的标注。这种标注就是标记螺丝的直径与长度，<code>M2×3</code>代表螺丝直径为2mm，长度为3mm。注意拧回螺丝时不要对应错，每个螺丝都有其对应的螺柱，拧错的话就会出问题，比如将短螺丝拧进长螺丝的位置或者小螺丝拧进大螺丝的位置会导致拧不紧，将大螺丝拧进小螺丝的位置会拧不进去或者破坏螺柱，将长螺丝拧进短螺丝的位置会导致无法牢固固定，留有较大裕量，或者严重者可能顶穿其它表面。</p><p>举个例子，联想thinkbook系列电脑常见的一种设计是一圈10个螺丝，最上方4个为长螺丝，而中部与下方的6个为短螺丝，如果上螺丝的时候误将长螺丝上到短螺丝的位置，就会把C面顶穿。</p><p>在拆装笔记本电脑时要养成良好的习惯，把拆下的螺丝按对应方位摆放在磁垫上，必要时（比如不同种类较多，较难记忆）可以拍摄照片并标注，以防自己忘记。</p><h3 id="头型">头型</h3><p>笔记本电脑上常见的头型主要有以下几种：</p><ul><li>十字型 笔记本上最常见的头型，没有之一。</li><li>六角星形 常见于华为、联想的轻薄本、办公本的D壳。</li><li>一字型虽然没见过笔记本上的一字螺丝，但是经常见到因为螺丝头被磨花了之后重新打磨出的一字头。</li></ul><p>每种头型也有大小之分，在选择螺丝刀批头时一定要选择大小对应的，不然容易拧花螺丝头。如果你一下不能确定哪个批头是对应大小，建议从大到小尝试，尽量用大不用小，因为过小的批头是最容易拧花螺丝的。</p><h3 id="防脱螺丝">防脱螺丝</h3><p>经常拧螺丝的朋友都知道，有些螺丝拧完之后会发出“咔哒咔哒”的声音，而不能像普通螺丝那样取下来。这种螺丝称为“防脱螺丝”。我们都知道，螺丝一般是用于把两个不同的固体部件紧固在一起的，一般的螺丝在拧下之后可以与这两个被其固定的部件分离，而防脱螺丝只能与较远的那个部件脱离，而与另一个较近的部件是固定的，常见的固定方法是在背面加一个小塑料片。</p><p>防脱螺丝常见于以下几种位置：</p><ul><li>ASUS游戏本以及ROG笔记本的D壳右下角螺丝</li><li>大部分游戏本的散热模组固定螺丝</li></ul><p>总之，如果你拧着拧着听到“咔哒咔哒”的声音，或者拧了很多圈螺丝也没有下来的意思，那很有可能它是一个防脱螺丝，把它留在原处即可。</p><h3 id="分段螺丝">分段螺丝</h3><p>常见于联想ThinkBook的D壳长螺丝。在拧过几圈之后，可以明显感觉到螺丝松动，可以上下滑动，但是又不能取下来。这时可以用一只手把螺丝抠到最上的位置，然后继续拧，就可以拧下来了。</p><h2 id="一些小技巧">一些小技巧</h2><p>接下来就是一些个人在维修过程中积累的经验，纯属一家之言，请理性辩证看待。</p><h3 id="比较难拧的螺丝">比较难拧的螺丝</h3><p>此处点名ASUS的天选系列的散热模组螺丝，螺丝头花纹比较软，而且出厂时螺丝与螺柱固定十分之紧，导致拧的时候很容易拧花。</p><p>对待这种比较难拧的螺丝，可以使用的一个小技巧是“重压轻拧”：用你的惯用手用力按压螺丝刀，用另一只手较轻地拧螺丝刀。需要找到一个巧劲，一旦螺丝松动了第一下，后续就好拧了。</p><h3 id="如果确实拧花了">如果确实拧花了</h3><p>如果您确实拧花了螺丝头，请在工作室寻找打磨笔。仙林工作室的打磨笔存放于窗户边的书柜中的一个黑色盒子里。用打磨笔在拧花的螺丝头部打磨出一个较深的一字槽，然后用一字批头拧。</p><h3 id="工作室螺丝刀使用技巧">工作室螺丝刀使用技巧</h3><p>大部分非电动螺丝刀套件（当然也包括我们在工作室部署的大部分套件）后部都有一个可以自由转动的圆形结构（如图所示）。<img src="/how2b-screwer/1.png">一般来说，我们会用一只手扶住这个圆形结构，使得螺丝刀头始终嵌合在螺丝头的纹路中，不产生相对滑动，而另一只手去转动螺丝刀，达到拧螺丝的目的。</p><p>工作室部署的螺丝刀套件一般是可以伸缩的，将如图所示的部分向该方向拨动，即可调节螺丝刀前部的长度。<img src="/how2b-screwer/2.png">一般来说，螺丝刀长度越长，所提供的瞬时扭矩越大，通俗地来说就越省力。<del>不过我一般都是就在最短状态使用desuwa</del></p>]]></content:encoded>
      
      
      <category domain="https://loveapple.icu/categories/IT%E4%BE%A0%E7%94%B5%E8%84%91%E7%BB%B4%E4%BF%AE/">IT侠电脑维修</category>
      
      
      <category domain="https://loveapple.icu/tags/%E7%BB%B4%E4%BF%AE%E9%9A%8F%E6%83%B3/">维修随想</category>
      
      
      <comments>https://loveapple.icu/how2b-screwer/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>锁相环技术入门简介</title>
      <link>https://loveapple.icu/PLL-intro/</link>
      <guid>https://loveapple.icu/PLL-intro/</guid>
      <pubDate>Fri, 03 Oct 2025 03:46:12 GMT</pubDate>
      
      <description>一篇关于锁相环的入门简介。文章从信号同步的实际问题出发，通俗地解释了锁相环的基本工作原理，并介绍了其核心组件——鉴相器与压控振荡器，以及如何通过加入分频器来实现倍频功能。</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="引言">引言</h2><p>设想一个问题：假如我手头有两个晶振，频率相同（比如都为32.768kHz），我们把这两个晶振激发出的时钟信号接到同一个示波器的两个端口，看到的波形会是相对静止的吗？</p><p>答案是不会，因为两个晶振虽然标定频率相同，但是都存在一定的误差，再加上外围匹配、温度漂移等条件的不同，就会使两个晶振的频率产生微小的差别。示波器按其中一个波形去固定触发时，另外一个波形就会相对移动。</p><p>同理，如果我们把两个不同的信号源设置到相同频率，接到同一个示波器上时，波形也会相对移动。如果我们把两个不同的DDS（直接数字频率合成器）输出的波形接到同一个示波器上时，波形也会相对移动。</p><p>这些现象是因为这些所谓的同频率信号并没有经过信号同步。</p><p>那么，如果有一个外面来的高频正弦波，我们希望输出一个与它完全同步的，相位差固定的（也就是说，在示波器上相对静止的）另一个正弦波，要怎么做呢？这就需要用到我们的锁相环（PLL，PhaseLocked Loop）。</p><h2 id="锁相环的基本构成">锁相环的基本构成</h2><p>最基本的同步锁相环由两个关键部分组成：鉴相器（PD，PhaseDetector）和压控振荡器（VCO，Voltage Controlled Oscillator）。</p><h3 id="鉴相器">鉴相器</h3><p>鉴相器，顾名思义，就是鉴定相位差的一种器件，输入两个（通常是高频）信号，输出一个电压值，输出电压值与两个输入信号的相位差相关。</p><figure><img src="/PLL-intro/AD8307.png" alt="AD8307鉴相特性曲线"><figcaption aria-hidden="true">AD8307鉴相特性曲线</figcaption></figure><p>如图所示，这是AD8307鉴相器的输出特性曲线，可以看到在输入的两个信号相位差为<span class="math inline">0</span>时，输出电压最高达到约<span class="math inline">1.8<em>V</em></span>，而在输入的两个信号相位差为<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="6.285ex" height="1.667ex" role="img" focusable="false" viewbox="0 -715 2778 737"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="B1" d="M56 320T56 333T70 353H369V502Q369 651 371 655Q376 666 388 666Q402 666 405 654T409 596V500V353H707Q722 345 722 333Q722 320 707 313H409V40H707Q722 32 722 20T707 0H70Q56 7 56 20T70 40H369V313H70Q56 320 56 333Z"/></g><g data-mml-node="mn" transform="translate(778,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z" transform="translate(500,0)"/><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1000,0)"/></g><g data-mml-node="mi" class=" MathML-Unit" transform="translate(2278,0)"><path data-c="B0" d="M147 628Q147 669 179 692T244 715Q298 715 325 689T352 629Q352 592 323 567T249 542Q202 542 175 567T147 628ZM313 628Q313 660 300 669T259 678H253Q248 678 242 678T234 679Q217 679 207 674T192 659T188 644T187 629Q187 600 198 590Q210 579 250 579H265Q279 579 288 581T305 595T313 628Z"/></g></g></g></svg></mjx-container></span>时，输出电压最低达到约<span class="math inline">0<em>V</em></span>。</p><h3 id="压控振荡器">压控振荡器</h3><p>压控振荡器就是用电压控制的振荡器，输入一个电压值，输出一个高频正弦波，且输出频率与输入电压值相关。</p><figure><img src="/PLL-intro/MAX2605.png" alt="MAX2605特性曲线"><figcaption aria-hidden="true">MAX2605特性曲线</figcaption></figure><p>如图所示，这是MAX2605压控振荡器的输出特性曲线，可以看到输入电压从<span class="math inline">0<em>V</em></span>增长到<span class="math inline">3<em>V</em></span>时，输出频率从大约<span class="math inline">48<em>M</em><em>H</em><em>z</em></span>增长到大约<span class="math inline">63<em>M</em><em>H</em><em>z</em></span>。</p><h3 id="为什么锁相环能同步信号">为什么锁相环能同步信号</h3><p>锁相环的结构很简单，只要把PD的输出接到VCO的输入，把VCO的输入和外部信号分别接到PD的两个输入，就是一个最简单的锁相环了。</p><figure><img src="/PLL-intro/PLL1.png" alt="PLL1"><figcaption aria-hidden="true">PLL1</figcaption></figure><p>当output与input的频率完全相同时，它们之间的相位差也会是一个固定值，于是VCO的输出频率不会改变，让output的频率与input继续保持相同；而当output与input的频率不相同时，它们之间的相位差也不固定，那么PD的输出就是一个变化的值，这会导致VCO的输出也随之改变。output与input的频率差越大，PD输出变化越快，VCO输出频率变化越快；output与input的频率差越小，PD输出变化越慢，VCO输出频率变化越慢，相当于“精细调整”。</p><p>经过这一系列负反馈的调节，output的频率会锁定在与input完全相同的频率上，在示波器上可观察到相对静止的波形。</p><h3 id="稳定性改进">稳定性改进</h3><p>上面提到的是最简单最基本的理论锁相环结构，事实上为了拥有一个稳定的锁相环，还需要在PD输出和VCO输入之间插入一个低通滤波器（LPF，LowPassFilter），相当于对频率变化做一个缓冲，使锁相环更容易锁定住，而不是飘来飘去，结构如下图所示。</p><figure><img src="/PLL-intro/PLL2.png" alt="PLL2"><figcaption aria-hidden="true">PLL2</figcaption></figure><h2 id="倍频锁相环">倍频锁相环</h2><p>锁相环的一大实际应用就是用作倍频器。普通的STM32芯片也能跑到大几十甚至几百MHz的频率，但是它们所使用的晶振却一般没有那么高的频率，这就是因为这些MCU内部集成了内部的PLL模块，可以把外部的晶振给出的相对较低频的时钟信号倍频为更高频的时钟信号。</p><p>上面我们介绍过的基本锁相环输出的信号是严格与输入信号同频率的。怎么输出倍频呢？</p><h3 id="分频器">分频器</h3><p>分频器是一个数字电路模块，输出频率为输入频率的整数分之一倍，通常比较常见的简单的分频器是二的幂次分频。这也很好理解，比如每次输入信号经过一个周期，就将输出信号的极性翻转，这样就已经是一个最简单的二分频器了；将两个二分频器进行串联，就可以得到四分频器。</p><h3 id="将分频器应用于锁相环">将分频器应用于锁相环</h3><p>现在我们希望在PLL中输出信号的频率是输入信号频率的倍数，那么如果反过来看，也就是希望输入信号是输出信号频率的整数分之一倍，也就是说，希望输出信号经过分配器之后，与输入信号进行同步，这样就可以达到输出信号为输入信号频率倍数的目的。</p><p>如果用“/N”来表示一个N分频器，那么N倍频PLL的结构就可以如下表示：</p><figure><img src="/PLL-intro/PLL3.png" alt="PLL3"><figcaption aria-hidden="true">PLL3</figcaption></figure>]]></content:encoded>
      
      
      <category domain="https://loveapple.icu/categories/%E9%AB%98%E9%A2%91%E7%94%B5%E8%B7%AF/">高频电路</category>
      
      
      <category domain="https://loveapple.icu/tags/EE/">EE</category>
      
      <category domain="https://loveapple.icu/tags/PLL/">PLL</category>
      
      
      <comments>https://loveapple.icu/PLL-intro/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Arch Linux本土化配置：为pacman指定镜像源</title>
      <link>https://loveapple.icu/pacman-mirror/</link>
      <guid>https://loveapple.icu/pacman-mirror/</guid>
      <pubDate>Fri, 26 Sep 2025 04:14:07 GMT</pubDate>
      
      <description>一篇介绍如何为 Arch Linux 的 pacman 包管理器配置国内镜像源以加速下载的指南。文章详细说明了如何使用 reflector 服务自动筛选镜像，并分享了一个自定义脚本技巧，将特定镜像源（如本校镜像）固定排在列表最前，实现自动化与个性化需求的结合。</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="什么是镜像源">什么是镜像源？</h2><p>pacman自不必说，这是ArchLinux的默认包管理器。而镜像源则是为加速下载而在各地搭建的服务器，由于众所周知的原因，很多时候我们下载软件包不能从国外的源网站直接下载，而需要从国内的镜像网站下载。国内常见的镜像网站主要有科研机构维护镜像站与企业维护镜像站，比如：- 科研机构维护镜像站 - <a href="https://mirrors.nju.edu.cn" rel="external nofollow noreferrer">南京大学镜像站</a> - <a href="https://mirrors.tuna.tsinghua.edu.cn" rel="external nofollow noreferrer">清华大学tuna镜像站</a> - <a href="https://mirrors.sjtu.edu.cn" rel="external nofollow noreferrer">上海交通大学镜像站</a> -企业维护镜像站 - <a href="https://mirrors.aliyun.com" rel="external nofollow noreferrer">阿里巴巴开源镜像站</a> - <a href="https://mirrors.cloud.tencent.com" rel="external nofollow noreferrer">腾讯软件源</a></p><h2 id="什么是reflector.service">什么是reflector.service</h2><p>大家可能在Arch安装教程中看到过禁用reflector.service的步骤。简而言之，这是一项定期向pacman的镜像源列表配置里自动写入配置的服务。<a href="https://wiki.archlinuxcn.org/wiki/Reflector" rel="external nofollow noreferrer">Arch中文维基</a>上的详细描述是这样的：&gt; Reflector 附带一个 reflector.service。这个服务会用/etc/xdg/reflector/reflector.conf 中指定的参数运行Reflector。此文件中的默认选项是一个很好的起点和示例。 &gt; &gt;例如，从法国和德国的镜像中筛选出 5 个最新的并且支持 HTTPS的镜像，然后将结果覆写到 /etc/pacman.d/mirrorlist 文件内；使用： &gt;&gt; <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/etc/xdg/reflector/reflector.conf</span><br><span class="line">------------------------------------------------------------</span><br><span class="line">--save /etc/pacman.d/mirrorlist</span><br><span class="line">--country France,Germany</span><br><span class="line">--protocol https</span><br><span class="line">--latest 5</span><br></pre></td></tr></table></figure> &gt; 启用 reflector.service 服务可以在引导时运行Reflector 脚本。要立即运行，启动该服务。</p><h2 id="依葫芦画瓢">依葫芦画瓢</h2><p>既然在中国，我们很简单地修改一下国家，就可以自动地添加中国的镜像源了。注意编辑mirrorlist需要root权限。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> vim /etc/xdg/reflector/reflector.conf</span><br></pre></td></tr></table></figure> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/etc/xdg/reflector/reflector.conf</span><br><span class="line">----------------------------------------------------------</span><br><span class="line">--save /etc/pacman.d/mirrorlist</span><br><span class="line">--country China</span><br><span class="line">--protocol https</span><br><span class="line">--latest 5</span><br></pre></td></tr></table></figure></p><h2 id="照猫画虎">照猫画虎</h2><p>有了这些基本的功能，我们能否再做出一些小改进呢？</p><p>查看reflector的help message： <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ reflector <span class="built_in">help</span></span><br></pre></td></tr></table></figure> 这里的helpmessage比较长，就不全放出来了，其中有几个我觉得比较有意思的：</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">--sort {age,rate,country,score,delay}</span><br><span class="line">                     Sort the mirrorlist. "age": last server</span><br><span class="line">                     synchronization; "rate": download rate; "country":</span><br><span class="line">                     country name, either alphabetically or in the order</span><br><span class="line">                     given by the --country option; "score": MirrorStatus</span><br><span class="line">                     score; "delay": MirrorStatus delay.</span><br></pre></td></tr></table></figure></blockquote><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-i, --include &lt;regex&gt;</span><br><span class="line">                      Include servers that match &lt;regex&gt;, where &lt;regex&gt; is a</span><br><span class="line">                      Python regular express.</span><br><span class="line">-x, --exclude &lt;regex&gt;</span><br><span class="line">                      Exclude servers that match &lt;regex&gt;, where &lt;regex&gt; is a</span><br><span class="line">                      Python regular express.</span><br></pre></td></tr></table></figure></blockquote><p>由于我是校园网环境，用科研机构维护镜像站相对比较快，于是我选择了如下配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> vim /etc/xdg/reflector/reflector.conf</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/etc/xdg/reflector/reflector.conf</span><br><span class="line">----------------------------------------------------------</span><br><span class="line">--save /etc/pacman.d/mirrorlist</span><br><span class="line">--country China</span><br><span class="line">--protocol https</span><br><span class="line">--latest 5</span><br><span class="line">--sort score</span><br><span class="line">--include edu.cn</span><br></pre></td></tr></table></figure><h2 id="更进一步">更进一步？</h2><p>至此，虽然已经能自动更新教育网镜像站，但是我还想固定一个我自己学校的镜像站，<del>以表达对yaoge123老师的支持</del>。但是如果用<code>--include</code>进行指定的话，就会只剩下这一个镜像站，稳定性又会收到影响。我希望能在固定一个镜像源的同时，又不损失reflector自动获取的镜像源。于是我编写了一个小脚本，向mirrorlist中写入一个固定的Server。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim ~/scripts/manual-reflector-update.sh</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">~/scripts/manual-reflector-update.sh</span><br><span class="line">------------------------------------</span><br><span class="line">sudo systemctl start reflector.service</span><br><span class="line"></span><br><span class="line">echo -e '################################################################################\n############## Arch Linux mirrorlist generated manually by Harry ###############\n################################################################################\n\nServer=https://mirrors.nju.edu.cn/archlinux/$repo/os/$arch\n\n' | \</span><br><span class="line">cat - /etc/pacman.d/mirrorlist | \</span><br><span class="line">sudo tee /etc/pacman.d/mirrorlist &gt; /home/Harry/logs/manual-reflector-update.log</span><br></pre></td></tr></table></figure><p>首先用systemctl调用reflector以更新mirrorlist，然后再手动向mirrorlist的最前端写入一个指定的Server。然后还要配置一下reflector.conf <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> vim /etc/xdg/reflector/reflector.conf</span><br></pre></td></tr></table></figure> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"># Reflector configuration file for the systemd service.</span><br><span class="line">#</span><br><span class="line"># Empty lines and lines beginning with "#" are ignored.  All other lines should</span><br><span class="line"># contain valid reflector command-line arguments. The lines are parsed with</span><br><span class="line"># Python's shlex modules so standard shell syntax should work. All arguments are</span><br><span class="line"># collected into a single argument list.</span><br><span class="line">#</span><br><span class="line"># See "reflector --help" for details.</span><br><span class="line"></span><br><span class="line"># Recommended Options</span><br><span class="line"></span><br><span class="line"># Set the output path where the mirrorlist will be saved (--save).</span><br><span class="line">--save /etc/pacman.d/mirrorlist</span><br><span class="line"></span><br><span class="line"># Select the transfer protocol (--protocol).</span><br><span class="line">--protocol https</span><br><span class="line"></span><br><span class="line"># Select the country (--country).</span><br><span class="line"># Consult the list of available countries with "reflector --list-countries" and</span><br><span class="line"># select the countries nearest to you or the ones that you trust. For example:</span><br><span class="line">--country China</span><br><span class="line"></span><br><span class="line"># Use only the  most recently synchronized mirrors (--latest).</span><br><span class="line">--latest 5</span><br><span class="line"></span><br><span class="line"># Sort the mirrors by synchronization time (--sort).</span><br><span class="line">--sort score</span><br><span class="line"></span><br><span class="line"># Include a custom re</span><br><span class="line"># --include edu.cn</span><br><span class="line"># Exclude a custom re</span><br><span class="line">--exclude nju.edu.cn</span><br></pre></td></tr></table></figure>这里保留了一点系统原本自动生成的注释部分，主要的修改在最后几行。</p><p>最后生成的mirrorlist如下： <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">################################################################################</span><br><span class="line">############## Arch Linux mirrorlist generated manually by Harry ###############</span><br><span class="line">################################################################################</span><br><span class="line"></span><br><span class="line">Server=https://mirrors.nju.edu.cn/archlinux/$repo/os/$arch</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">################################################################################</span><br><span class="line">################# Arch Linux mirrorlist generated by Reflector #################</span><br><span class="line">################################################################################</span><br><span class="line"></span><br><span class="line"># With:       reflector @/etc/xdg/reflector/reflector.conf</span><br><span class="line"># When:       2025-09-24 10:40:33 UTC</span><br><span class="line"># From:       https://archlinux.org/mirrors/status/json/</span><br><span class="line"># Retrieved:  2025-09-24 10:38:21 UTC</span><br><span class="line"># Last Check: 2025-09-24 10:16:40 UTC</span><br><span class="line"></span><br><span class="line">Server = https://mirrors.ustc.edu.cn/archlinux/$repo/os/$arch</span><br><span class="line">Server = https://mirrors.tuna.tsinghua.edu.cn/archlinux/$repo/os/$arch</span><br><span class="line">Server = https://mirrors.jlu.edu.cn/archlinux/$repo/os/$arch</span><br><span class="line">Server = https://mirrors.xjtu.edu.cn/archlinux/$repo/os/$arch</span><br><span class="line">Server = https://mirrors.neusoft.edu.cn/archlinux/$repo/os/$arch</span><br></pre></td></tr></table></figure></p>]]></content:encoded>
      
      
      <category domain="https://loveapple.icu/categories/%E6%8A%80%E6%9C%AF%E5%AE%9E%E8%B7%B5/">技术实践</category>
      
      
      <category domain="https://loveapple.icu/tags/Arch-Linux/">Arch Linux</category>
      
      <category domain="https://loveapple.icu/tags/%E9%95%9C%E5%83%8F%E6%BA%90/">镜像源</category>
      
      <category domain="https://loveapple.icu/tags/Arch-reflector/">Arch reflector</category>
      
      <category domain="https://loveapple.icu/tags/Linux/">Linux</category>
      
      
      <comments>https://loveapple.icu/pacman-mirror/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>安装 Arch Linux</title>
      <link>https://loveapple.icu/install-arch/</link>
      <guid>https://loveapple.icu/install-arch/</guid>
      <pubDate>Wed, 24 Sep 2025 10:49:59 GMT</pubDate>
      
      <description>一篇记录个人安装 Arch Linux 经历的博客，重点分享了在校园网环境下解决联网问题以及配置引导程序时的曲折过程，并最终成功从零搭建起一个完整的 Arch 系统。</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="起因">起因</h2><p>一开是我想安装ArchLinux的理由还挺俗套的，或许是因为觉得Ubuntu有太多人用太寻规蹈矩了想标新立异一下，或许是因为觉得Arch每月一更还挺酷的，或许只是给自己找点事情做熟悉熟悉Linux，或许只是因为觉得用Arch看起来更酷更geek（真的会有吗），总之就这么决定了。</p><p>本文会比较粗略地讲一下我安装ArchLinux的过程，遇到的问题以及我解决的过程。但是由于本文是我安装之后事后写的而非安装过程中一边装一边记录的，所以可能会有些不准确之处，敬请谅解。</p><p>正由于这个原因，<strong>请不要把这篇博客当成安装ArchLinux的教程</strong>。我个人参考的教程主要包括<a href="https://wiki.archlinuxcn.org/wiki/%E5%AE%89%E8%A3%85%E6%8C%87%E5%8D%97" rel="external nofollow noreferrer">安装指南- Arch Linux 中文维基</a>以及<a href="https://arch.icekylin.online/guide/rookie/basic-install" rel="external nofollow noreferrer">Archlinux基础安装 | archlinux 简明指南</a>，还有询问Deepseek与ChatGPT。</p><h2 id="打开镜像">打开镜像</h2><p>我有一个专门用于安装系统的U盘，里面装了Ventoy以及各种镜像。直接从我们学校的<a href="mirrors.nju.edu.cn">镜像站</a>下载ArchLinux的最新ISO镜像，扔到U盘里，然后插U盘重启系统，选择ArchLinux的镜像启动，在一番眼花撩乱啥也看不清的控制台自动输出之后，就进入了一个临时的live环境的root终端。</p><h2 id="连接网络">连接网络</h2><p>依我安装过程中的初步体会，Arch的安装是从这个临时的live环境用<code>pacstrap</code>命令往硬盘挂载的<code>/mnt</code>中下载各种内核与软件包。然而这在校园网环境就有点尴尬了：校园网环境光是连上网络是无法访问外界网络的，必须要经过身份认证才可以，而身份认证一般又依赖浏览器，live环境连图形库应该都没有，遑论浏览器呢？不过也有几个对策：</p><ul><li><p>第一个思路，我们学校的校园网有“无感知认证”功能，为了避免学生每次重连校园网都要重新认证的麻烦，可以为设备开启这个无感知认证服务，这样校园网的身份认证就会记住这个设备，连接时不再需要重复认证。经学校里诸多前辈测试，这个无感知认证记录的是设备MAC号，而我们从Windows切到Linux时用的网卡硬件是同一套，MAC号也是一样的，所以可以沿用这个无感知直接无痛认证。如果你的学校校园网也有类似服务，可以尝试一下。</p></li><li><p>第二个思路，虽然连接不上外网，但是换个思路能不能只在校园网内部完成ArchLinux的安装呢？<code>pacstrap</code>安装与pacman一样可以指定镜像源，如果你的学校有镜像源的话，你可以像我一样先禁用reflector服务，然后手动编辑<code>/etc/pacman.d/mirrorlist</code>，把校园网内部就能访问的镜像站放上去，应该也可以正常使用<code>pacstrap</code>来安装内核与各种包。不过由于我有无感知认证，所以这个方法究竟是否可行我其实并没有实际尝试过。</p></li><li><p>第三个思路，实在不行就用手机热点呗也没什么不好的（）</p></li></ul><h2 id="硬盘分区">硬盘分区</h2><p>我的笔记本里装了两块硬盘，我的打算是一块1T大硬盘给Windows，另一块256GB小硬盘给Linux，反正Linux也能访问到我Windows上的文件。按教程上说的分了一块EFI引导分区（直接给了1G，大点就大点吧也不缺这点空间），一块SWAP分区（教程上说按内存60%或100%，<span class="math inline">32<em>G</em><em>B</em> × 0.6 = 19.2<em>G</em><em>B</em></span>），剩下所有空间全作为Linux主分区。EFI分区格式化为FAT32，主分区格式化为ext4，按教程说的分别挂载到<code>/mnt/boot</code>与<code>/mnt</code>上。</p><h2 id="安装arch">安装Arch</h2><p>按教程说的<code>pacstrap</code>了一堆东西到<code>/mnt</code>去之后，<code>arch-chroot /mnt</code>，就算是正式用起Arch了，虽然还只有一个简陋的命令行界面，并且由于没有配置任何的引导，reboot之后也不能自然地进入这个Arch，还得用介质挂载再chroot。</p><h2 id="所以下一步就是安装grub">所以下一步就是安装GRUB</h2><p>还是按教程照本宣科，用<code>pacman</code>装了一堆包，然后……<code>grub-mkconfig</code>检测到了0个操作系统（悲）。当时已经晚上挺晚的了，也不想再费劲查下去查半天了（事后想想，可能是EFI分区挂载的顺序或者位置不对之类的问题？或者是os-prober的问题？），于是先睡一觉，然后第二天从头开始把所有分区扬了重新装了一边<del>（毕竟是新系统，其实还真不好说扬了重装和查错修改哪个更快）</del>，然后就莫名好了，不仅Arch有了Windows也有了……</p><h2 id="安装arch之后必须要做的那件事">安装Arch之后必须要做的那件事</h2><p><del>当然是<code>pacman -S screenfetch</code>然后<code>screenfetch</code>了，谁不喜欢那个大大的蓝A标呢。</del></p><p>俗人不能免俗，这样的时刻当然得来一张。</p><p><img src="/install-arch/screenfetch.jpg"></p><h2 id="安装桌面环境">安装桌面环境</h2><p>xorg装了，Wayland装了，GNOME装了，跑起来了，好像没遇到啥问题……</p><h2 id="aur才是arch之魂">AUR才是Arch之魂</h2><p>按网上的教程clone并构建了yay，好像也没遇到啥问题……</p><p>至此，一个初步可用的Arch就装好了。</p>]]></content:encoded>
      
      
      <category domain="https://loveapple.icu/categories/%E6%8A%80%E6%9C%AF%E5%AE%9E%E8%B7%B5/">技术实践</category>
      
      
      <category domain="https://loveapple.icu/tags/%E5%AE%89%E8%A3%85%E7%B3%BB%E7%BB%9F/">安装系统</category>
      
      <category domain="https://loveapple.icu/tags/Arch-Linux/">Arch Linux</category>
      
      <category domain="https://loveapple.icu/tags/Linux/">Linux</category>
      
      
      <comments>https://loveapple.icu/install-arch/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>换AB面，但是屏幕翻车</title>
      <link>https://loveapple.icu/BreakScreen/</link>
      <guid>https://loveapple.icu/BreakScreen/</guid>
      <pubDate>Mon, 22 Sep 2025 06:59:22 GMT</pubDate>
      
      <description>纪录一单thinkbook更换AB面结果屏幕损坏的维修翻车事故。</description>
      
      
      
      <content:encoded><![CDATA[<p>周四下午，我正在<del>翘了CPP课</del>给客户修电脑，依稀记得应该是一单清灰+键盘失灵（没复现出来）（就说412是风水宝地吧）。这时突然有人敲门进入工作室，抱着一台笔记本，经询问是预约过了，但是还没有社员接单。按流程来说，客户应该等有社员接单之后再约定时间来工作室。但是当天我也在做最后一单了，于是顺便给他看了一下是什么情况。</p><p>电脑是一台Thinkbook，背面印着型号为ThinkBook 15 G3ITL。问题很明显，是转轴处开裂了。近距离仔细查看可以看到，是转轴靠右侧与A面链接处，塑料柱包裹着金属螺柱一起从A面上脱落了，导致AB面与CD面仅靠左侧连接，摇摇欲坠。由于转轴与C面的铰链仍然是好的，转轴本身看起来也没什么变形之类的问题，于是我让他自行购买A面，等到货了再来更换，并在后台系统接了这单预约单。</p><p>周六傍晚客户发QQ说买的AB面到货了，问我什么时候可以帮他更换。由于周六晚有别的事情，我就约他周日白天，最终确定在周日上午九点。</p><p>周日上午如约<del>其实晚了十五分钟左右，睡过了（）</del>帮他拆机，首先将转轴与C面分离，然后开始撬B面以露出转轴与A面的螺丝，以便将转轴完全取下之后更换A面。拆着拆着发现不对劲：大部分机器的B面边框与A面一般是用卡扣进行连接，用软卡片或者塑料撬棒撬下来；而这台机器的B面大部分地方都能用这种方法拆下来，但是有一个角落不管怎么撬都纹丝不动。询问了一下客户，得知是这个角落之前坏过一次，去找了联想官方售后，售后直接用胶给他粘上了……</p><p>没什么办法，想着客户反正买了新的A面和B面边框，只要屏幕不坏，其他部分反正都是要换的，于是略带破坏性地用力撬B面边框，还是不行……这时突然想到工作室有一瓶“粘胶清除剂”，抱着死马当活马医的心态喷了一点，然后终于能撬动了，拆开来发现底下全都是白色的胶，完全是固体状态，幸好不需要继续使用这个AB面了。</p><p>B面边框既已拆除，找到下方两个易拉胶小头，将易拉胶抽出（真的很解压，推荐大家都来玩玩这个），然后就能将屏幕以及摄像头模组从A面上拆下来了。接下来就是将这些东西移植到新的A面上，贴上新的B面边框，然后拧回到C面上组装即可。这时（大约是十点左右），顾客问我还要多久，他约了同学要去方肇周打乒乓球。我想着组装确实还要不少时间，就让他先去，我在工作室继续帮他装，等装好了再叫他。</p><p>大约十一点左右，我终于将这些部分组装好之后开机，屏幕正常，网络也正常，但是没有密码进入不了系统，检查不了其他的部分。于是我给客户发了QQ让他过来取机。还需检查的部分主要是摄像头，因为摄像头模组是用胶粘在原来的A面上的，拔下来的时候电路板似乎弯折了一下，不过完全拆下来之后看它似乎本来就是可以弯折的，倒也没太担心，再加上它的FPC排线也是重新插过的，所以还是要开机检查一下。结果一检查发现果然用不了了（）设备管理器显示有一个“USB相机”设备，但是打开相机应用只有一片全黑画面。</p><p>我推测可能是装回去的时候摄像机的FPC排线没有完全插好导致了这个问题，客户表示他需要使用这个相机功能，让我再帮他拆一次，他下午来拿。</p><p>这次拆机与上次一样，还是先把转轴从C面拆下来，然后撬开B面，拧螺丝取下两个转轴体，然后抽易拉胶，就在这时第一个意外发生了：右侧的易拉胶的小头直接断掉了（这几根易拉胶都是买A面送的，本来就贴在A面上，我也不好说到底是质量问题还是手法问题）。左侧的易拉胶倒是顺利抽了出来。这时我犯了一个错误，冒险尝试从左侧将屏幕取下来。易拉胶的特性是可以顺向抽出，但是在粘合方向如果强行拆除会很费力。拆除的过程中，“啪”地一声，屏幕断了。把屏幕排线插回主板，开机发现屏幕已经花屏，无法正常显示了。</p><p>后事就是打电话给客户，协商购买新屏幕进行更换，如果能报销就走学校报销渠道。</p><p>Sep 23:今天屏幕到了，帮客户换上了，能正常使用，但是摄像头依然不能用，客户表示不要继续整了。现在摄像头不是黑屏了，而是直接找不到设备。</p><p>为了贴两条易拉胶耗费了六七条（）贴歪一点就得重来（）</p>]]></content:encoded>
      
      
      <category domain="https://loveapple.icu/categories/IT%E4%BE%A0%E7%94%B5%E8%84%91%E7%BB%B4%E4%BF%AE/">IT侠电脑维修</category>
      
      
      <category domain="https://loveapple.icu/tags/%E7%BB%8F%E9%AA%8C%E8%AE%B0%E5%BD%95%E5%BD%92%E6%A1%A3/">经验记录归档</category>
      
      <category domain="https://loveapple.icu/tags/%E5%B1%8F%E5%B9%95%E6%9B%B4%E6%8D%A2/">屏幕更换</category>
      
      <category domain="https://loveapple.icu/tags/%E7%BB%B4%E4%BF%AE%E7%BF%BB%E8%BD%A6%E8%AE%B0%E5%BD%95/">维修翻车记录</category>
      
      
      <comments>https://loveapple.icu/BreakScreen/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>一个自制的Keil2Cmake转换器小工具</title>
      <link>https://loveapple.icu/Keil2Cmake/</link>
      <guid>https://loveapple.icu/Keil2Cmake/</guid>
      <pubDate>Sun, 21 Sep 2025 09:42:57 GMT</pubDate>
      
      <description>一个将根据uvprojx文件将keil工程转换到CMake工程的小工具，以便用VSCode取代Keil uVision。</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="前言">前言</h2><p>自制了一个将根据uvprojx文件将keil工程转换到CMake工程的小工具，这样就可以用VSCode取代KeiluVision了（这构式IDE经常卡得要死）。项目仓库见<a href="https://github.com/LoveApple14434/Keil2Cmake" rel="external nofollow noreferrer">Keil2Cmake</a>。</p><h2 id="絮语">絮语</h2><p>这个项目又是拿AI跑出来的（）越写越感觉AI写代码真挺爽的不知道之前在坚持什么（）</p><p><strong>README如下：</strong></p><h2 id="keil2cmake-converter">Keil2Cmake Converter</h2><p>2025 年 9 月 21 日：已使用 Pyinstaller 生成了适用于 Windows 和 Linux的可执行文件。请通过 <a href="https://github.com/LoveApple14434/Keil2Cmake/releases/tag/v1" rel="external nofollow noreferrer">GitHubrelease</a> 下载使用。现在你的电脑上不再需要安装 Python 环境了。</p><h3 id="环境要求">环境要求</h3><ul><li><del>Python3</del></li><li>Cmake</li><li>Ninja</li><li>Keil 编译器</li></ul><h3 id="首次使用前">首次使用前</h3><p>2025 年 9 月 21 日：现在你不再需要在代码中填写路径了。但首次使用keil2cmake 时，你仍需在命令行中配置路径。请参考 <a href="https://www.google.com/search?q=%23%E9%85%8D%E7%BD%AE%E5%B7%A5%E5%85%B7%E9%93%BE%E8%B7%AF%E5%BE%84" rel="external nofollow noreferrer">配置工具链路径</a>。</p><p><del>在第一次使用之前，请转到 <strong>第 202 行</strong> 并填写你 PC上 <strong>自己的 Keil 安装路径</strong>。</del></p><p><del>如果你不知道如何找到它，请打开 Keil 并打开 Windows任务管理器，在其中右键单击 Keil任务，打开文件所在位置，然后将该路径复制到 <a href="https://www.google.com/search?q=./Convert.py" rel="external nofollow noreferrer">Convert.py 的 202行</a> 即可。</del></p><h3 id="配置工具链路径">配置工具链路径</h3><p>工具链路径应存储在 <code>~/.keil2cmake/path.cfg</code>文件中。使用以下命令来查看或编辑路径：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">keil2cmake --show-config</span><br><span class="line">keil2cmake -sc</span><br><span class="line"></span><br><span class="line">keil2cmake --edit ARMCC_PATH=D:/Program/Keil_v5/ARM/ARM_Compiler_5.06u7/bin/</span><br><span class="line">keil2cmake -e ARMCC_PATH=D:/Program/Keil_v5/ARM/ARM_Compiler_5.06u7/bin/</span><br><span class="line">keil2cmake --edit ARMCLANG_PATH=D:/Program/Keil_v5/ARM/ARMCLANG/bin/</span><br><span class="line">keil2cmake -e ARMCLANG_PATH=D:/Program/Keil_v5/ARM/ARMCLANG/bin/</span><br></pre></td></tr></table></figure><h3 id="使用方法">使用方法</h3><h4 id="通过-keil-生成分散加载文件scatter-file">0. 通过 Keil生成分散加载文件（scatter file）</h4><p>2025 年 8 月 3日：我增加了一个新功能来为你生成分散加载文件，所以<strong>在大多数情况下你不再需要手动执行此步骤</strong>。该功能对绝大多数STM32 MCU都应有效。如果它在你的项目中不起作用，请按照以下步骤使用你自己的分散加载文件替换它。</p><blockquote><p>打开你想要转换的 Keil项目，确保它<strong>至少已经被编译过一次</strong>。</p><p>打开 <strong>‘Options for Target’ (目标选项)</strong>，切换到<strong>‘Linker’ (链接器)</strong> 标签页，<strong>取消勾选 ‘Use MemoryLayout from Target Dialog’(使用目标对话框中的内存布局)</strong>，然后点击下方的 <strong>‘Edit’(编辑)</strong> 按钮，Keil 将自动为你生成一个 <code>Template.sct</code>文件。</p><p>关闭 Keil，然后进行下一步。</p></blockquote><h4 id="可选-将-keil2cmake-添加到你的-path-环境变量">0.5 (可选) 将keil2cmake 添加到你的 Path 环境变量</h4><p>这样做可以让你不必输入完整的（可能很长的）路径。</p><p>关于如何将 <code>keil2cmake.exe</code> 所在的路径添加到 Path环境变量，你可以在网上搜索“&lt; Windows/Linux &gt; 添加环境变量Path”。</p><h4 id="根据-uvprojx-文件生成-cmakelists.txt-和-toolchain.cmake">1. 根据uvprojx 文件生成 CMakeLists.txt 和 toolchain.cmake</h4><p>在任意命令行中，执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;keil2cmake可执行文件路径&gt; &lt;uvision项目文件.uvprojx的路径&gt; -o &lt;输出目录路径&gt;</span><br></pre></td></tr></table></figure><p>例如，如果 <code>keil2cmake</code> 可执行文件在你的主目录(<code>home</code>) 下：在 Keil 项目的目录下打开 bash 并执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/keil2cmake ./USER/example.uvprojx -o ./USER/</span><br></pre></td></tr></table></figure><p>然后 <code>CMakeLists.txt</code> 和 <code>toolchain.cmake</code>文件将会生成在 <code>./USER/</code> 目录下。</p><p>如果你已经完成了<a href="https://www.google.com/search?q=%2305-%E5%8F%AF%E9%80%89-%E5%B0%86-keil2cmake-%E6%B7%BB%E5%8A%A0%E5%88%B0%E4%BD%A0%E7%9A%84-path-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F" rel="external nofollow noreferrer">将keil2cmake 添加到你的 path 环境变量</a>的步骤，你可以只输入<code>keil2cmake</code> 而不是它的完整路径，像这样：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keil2cmake ./USER/example.uvprojx -o ./USER/</span><br></pre></td></tr></table></figure><p>在大多数情况下，你应该将输出目录设置为 <code>.uvprojx</code>文件所在的目录，因为 .c、.h和其他文件很可能在工程文件中是以相对路径的形式组织的。如果输出目录是其他文件夹，你可能需要手动修改<code>CMakeLists.txt</code> 文件中的路径。</p><h4 id="生成构建文件并编译">2. 生成构建文件并编译</h4><p>在上面提到的输出目录中，于命令行执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CMake -G Ninja -B ./build .</span><br><span class="line">CMake --build ./build</span><br></pre></td></tr></table></figure><p>然后你的目标文件（.hex 和 .bin）将会生成在 <code>./build/</code>目录下。之后你可以使用 FLYMCU、ST-Link Utility或任何你喜欢的工具将其烧录到你的 MCU 中。</p><h3 id="在-vs-code-中使用">在 VS Code 中使用</h3><p>在 VSCode 中使用 CMake 非常简单。只需在 VS Code中打开你项目的顶层目录，然后按 <strong>F1</strong> 并执行<strong><code>CMake: Configure</code></strong>，<code>./build/</code>目录就会被自动创建。要编译生成 .bin 和 .hex 文件，请按<strong>F1</strong> 并执行<strong><code>CMake: build</code></strong>。</p>]]></content:encoded>
      
      
      <category domain="https://loveapple.icu/categories/%E6%8A%80%E6%9C%AF%E5%AE%9E%E8%B7%B5/">技术实践</category>
      
      
      <category domain="https://loveapple.icu/tags/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/">开源项目</category>
      
      <category domain="https://loveapple.icu/tags/EE/">EE</category>
      
      
      <comments>https://loveapple.icu/Keil2Cmake/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>本地开发，远程部署：如何把你的服务器变成Git仓库？</title>
      <link>https://loveapple.icu/GitAway/</link>
      <guid>https://loveapple.icu/GitAway/</guid>
      <pubDate>Wed, 10 Sep 2025 10:48:13 GMT</pubDate>
      
      <description>在本地机上写代码，远程部署到服务器：你的下一个git服务器何必是GitHub？</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="从何而来">⏯️从何而来</h2><p><a href="/Blogroll/">上一篇博客</a>中讲到，我在我自己的服务器上部署了一个Blogroll项目。在写作博客的时候我突然想到，hexo框架的博客可以在本地机上写，然后用<code>hexo d</code>命令一键部署，那么这个项目也应该可以这样操作。</p><h2 id="实践过程">⏩实践过程</h2><p>由于之前部署hexo博客的时候已经建过git用户了，这次就不用再建用户了.首先以git用户的身份打开bash，然后直接在<code>/home/git</code>底下建立一个新的bare仓库：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init --bare link-house.git</span><br></pre></td></tr></table></figure>下一步就是设置一个post-receive脚本，正像名字所暗示的那样，这个脚本会在服务器每次接收到一次推送之后，都会执行这个脚本。脚本语言采用bash，一个很简单的例子如下：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git --work-tree=/data/hexo --git-dir=/home/git/hexo.git checkout -f</span><br></pre></td></tr></table></figure>这是之前为hexo博客仓库写的自动部署脚本，会在服务器接收到push之后，将这些修改<code>checkout</code>到<code>work-tree</code>（即<code>/data/hexo</code>）中。创建脚本之后，还要给脚本赋予可执行权限<code>chmod u+x ./hooks/post-receive</code>。但是这个脚本有一个缺点：没办法知道它究竟执行了没有，结果如何。本来我为friend-link-house这个项目也是配置的类似的脚本，但是从本地机push之后，服务器端并没有更新。ssh到服务器上手动执行这个post-receive脚本才发现是work-tree文件夹的权限没有设置对。如果这个脚本执行的时候有log记录执行结果，那岂不是更好？于是我让deepseek帮我写了一个脚本：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">TARGET=<span class="string">"/data/Friend-Link-House"</span></span><br><span class="line">GIT_DIR=<span class="string">"/home/git/link-house.git"</span></span><br><span class="line">BRANCH=<span class="string">"main"</span></span><br><span class="line">LOG_FILE=<span class="string">"/home/git/link-house.git/hooks/post-receive.log"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建日志目录（如果不存在）</span></span><br><span class="line"><span class="built_in">mkdir</span> -p $(<span class="built_in">dirname</span> <span class="string">"<span class="variable">$LOG_FILE</span>"</span>)</span><br><span class="line"><span class="built_in">touch</span> <span class="string">"<span class="variable">$LOG_FILE</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"=== 部署开始: <span class="subst">$(date)</span> ==="</span> &gt;&gt; <span class="string">"<span class="variable">$LOG_FILE</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 记录当前状态</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"当前目录: <span class="subst">$(pwd)</span>"</span> &gt;&gt; <span class="string">"<span class="variable">$LOG_FILE</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"目标目录: <span class="variable">$TARGET</span>"</span> &gt;&gt; <span class="string">"<span class="variable">$LOG_FILE</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Git 目录: <span class="variable">$GIT_DIR</span>"</span> &gt;&gt; <span class="string">"<span class="variable">$LOG_FILE</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查分支信息</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"分支信息:"</span> &gt;&gt; <span class="string">"<span class="variable">$LOG_FILE</span>"</span></span><br><span class="line">git --git-dir=<span class="string">"<span class="variable">$GIT_DIR</span>"</span> branch -a &gt;&gt; <span class="string">"<span class="variable">$LOG_FILE</span>"</span> 2&gt;&amp;1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查最新提交</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"最新提交:"</span> &gt;&gt; <span class="string">"<span class="variable">$LOG_FILE</span>"</span></span><br><span class="line">git --git-dir=<span class="string">"<span class="variable">$GIT_DIR</span>"</span> <span class="built_in">log</span> -1 &gt;&gt; <span class="string">"<span class="variable">$LOG_FILE</span>"</span> 2&gt;&amp;1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行部署</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"执行检出操作..."</span> &gt;&gt; <span class="string">"<span class="variable">$LOG_FILE</span>"</span></span><br><span class="line">git --git-dir=<span class="string">"<span class="variable">$GIT_DIR</span>"</span> --work-tree=<span class="string">"<span class="variable">$TARGET</span>"</span> checkout -f <span class="variable">$BRANCH</span> &gt;&gt; <span class="string">"<span class="variable">$LOG_FILE</span>"</span> 2&gt;&amp;1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查执行结果</span></span><br><span class="line"><span class="keyword">if</span> [ $? -eq 0 ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Git 命令执行成功"</span> &gt;&gt; <span class="string">"<span class="variable">$LOG_FILE</span>"</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 检查目标目录内容</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"目标目录内容:"</span> &gt;&gt; <span class="string">"<span class="variable">$LOG_FILE</span>"</span></span><br><span class="line">    <span class="built_in">ls</span> -la <span class="string">"<span class="variable">$TARGET</span>"</span> &gt;&gt; <span class="string">"<span class="variable">$LOG_FILE</span>"</span> 2&gt;&amp;1</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Git 命令执行失败"</span> &gt;&gt; <span class="string">"<span class="variable">$LOG_FILE</span>"</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"=== 部署完成: <span class="subst">$(date)</span> ==="</span> &gt;&gt; <span class="string">"<span class="variable">$LOG_FILE</span>"</span></span><br></pre></td></tr></table></figure>这样就可以随时查看log文件，以获取上一次部署的相关信息。</p><h2 id="出现了一些问题">❓出现了一些问题</h2><p>在这样调试好之后，我非常兴奋地从本地机push到了<code>git@&lt;服务器域名&gt;:/home/git/link-house.git</code>上。然而，网页上并没有发生这个更新。这又是为什么呢？反复研究了这个过程之后，我终于发现……</p><p>原来我的post-receive光顾着<code>git checkout</code>把文件复制进去了，而<code>npm run build</code>所构建的dist文件夹又在<code>.gitignore</code>列出的忽略文件里，所以服务器端的dist文件夹其实并没有被修改。解决起来也很简单，就在post-receive脚本里添加构建命令就可以了，修改如下：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">43,46d42</span><br><span class="line">&lt; <span class="built_in">cd</span> <span class="variable">$TARGET</span></span><br><span class="line">&lt; npm run gen &gt;&gt; <span class="string">"<span class="variable">$LOG_FILE</span>"</span> 2&gt;&amp;1</span><br><span class="line">&lt; npm run build &gt;&gt; <span class="string">"<span class="variable">$LOG_FILE</span>"</span> 2&gt;&amp;1</span><br><span class="line">&lt; </span><br></pre></td></tr></table></figure></p>]]></content:encoded>
      
      
      <category domain="https://loveapple.icu/categories/%E6%8A%80%E6%9C%AF%E5%AE%9E%E8%B7%B5/">技术实践</category>
      
      
      <category domain="https://loveapple.icu/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/">服务器</category>
      
      <category domain="https://loveapple.icu/tags/%E8%BF%9C%E7%A8%8B%E9%83%A8%E7%BD%B2/">远程部署</category>
      
      
      <comments>https://loveapple.icu/GitAway/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>部署Friend-Link-House项目:开源社区初探</title>
      <link>https://loveapple.icu/Blogroll/</link>
      <guid>https://loveapple.icu/Blogroll/</guid>
      <pubDate>Tue, 09 Sep 2025 03:09:41 GMT</pubDate>
      
      <description>通过RSS自动订阅他人博客网站上的文章</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="从何而来">⏯️从何而来</h2><p>在与<a href="https://github.com/idealclover" rel="external nofollow noreferrer">翠翠</a>学长交换友链的时候，接触到了学长的<a href="https://github.com/idealclover/Friend-Link-House" rel="external nofollow noreferrer">Friend-Link-House</a>这个项目，基于<a href="https://github.com/nju-lug/blogroll" rel="external nofollow noreferrer">BlogRoll</a>这个项目而来，可以自动订阅他人博客网站上的文章，感觉很有意思，于是想给自己也部署一个。</p><h2 id="如何进展">⏩如何进展</h2><h3 id="先跑起来再说">先跑起来再说</h3><p>首先把仓库fork一份到自己的账户底下，然后clone到了我的服务器上，跑了一遍<code>npm install</code><code>npm run gen</code><code>npm run dev</code>，没遇到什么困难就可以看到网页了。</p><h3 id="订阅源的替换">订阅源的替换</h3><p>接下来就是把订阅的链接从学长的朋友们换成我的朋友们。从学长写好的README以及对main.js的分析中可以得知，每次访问这个网页的时候都会从存储的各RSS源获取最新的xml，而这些RSS源的url则来自于运行<code>npm run gen</code>命令时，从README.md中的表格里提取的信息。手动把表格里的数据换成了目前已经添加友链的几个朋友<del>（反正也没几条，手动复制一下了）</del>，重新跑一遍<code>npm run gen</code><code>npm run dev</code>，就可以看我的朋友们的文章了。</p><h3 id="前端页面样式的修改">前端页面样式的修改</h3><p>虽然跑起来了，但是这个页面的风格跟学长的页面还是完全一致的，总感觉有点忐忑<del>（虽然说只要遵循了MIT许可证就并不会被认为抄袭什么的）</del>，而且这个页面的风格和我自己的<a href="https://loveapple.icu">个人主页</a>的风格也不太一致。后端没什么我能动手的地方，但是前端的样式还是可以自己scratch一下的。修改了一下背景的颜色，用卡片之类的样式把时间轴上的每篇blog包裹了一下，看起来就跟主页上的风格比较类似了。</p><h3 id="部署到域名">部署到域名</h3><p>使用nginx进行反向代理，一开始写入的配置如下 <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Friend-Link-House代理到友链屋</span><br><span class="line">location /Friend-Link-House/ <span class="punctuation">{</span></span><br><span class="line">root/data/Friend-Link-House/web/dist/;</span><br><span class="line">indexindex.html;</span><br><span class="line"><span class="punctuation">}</span></span><br></pre></td></tr></table></figure>运行<code>nginx -s reload</code>之后，尝试访问<code>loveapple.icu/Friend-Link-House</code>，结果报错503。本来以为是权限的问题，但是提权了之后依然无法访问。遂询问deepseek老师，发现关键是nginx配置反代时的语法，用<code>root</code>会拼接到后面导致访问的位置出错，应该改成<code>alias</code>，最终配置如下：<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># Friend-Link-House代理到友链屋</span><br><span class="line">location /Friend-Link-House/ <span class="punctuation">{</span></span><br><span class="line">alias/data/Friend-Link-House/web/dist/;</span><br><span class="line">indexindex.html;</span><br><span class="line">try_files $uri $uri/ /newspaper/index.html;</span><br><span class="line"><span class="punctuation">}</span></span><br><span class="line">#资源配置路径</span><br><span class="line">location /assets/ <span class="punctuation">{</span></span><br><span class="line">alias /data/Friend-Link-House/web/dist/assets/;</span><br><span class="line">expires <span class="number">1</span>y;</span><br><span class="line">add_header Cache-Control public;</span><br><span class="line"><span class="punctuation">}</span></span><br></pre></td></tr></table></figure> 经测试即可愉快访问这个域名了。</p><h3 id="主页入口">主页入口</h3><p>有了域名之后，下一个问题就是如何把这个新的页面与原有的主页整合起来。我的个人主页是用hexo博客框架搭建的，使用了butterfly主题。这个主题有一个<code>menu</code>配置项，可以在右上角显示一个菜单栏，可以自定义跳转的相对链接、绝对链接，还可以自定义图标。于是速速配置如下：<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">Home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="comment"># List||fas fa-list:</span></span><br><span class="line">    <span class="comment"># Music: /music/ || fas fa-music</span></span><br><span class="line">    <span class="comment"># Movie: /movies/ || fas fa-video</span></span><br><span class="line">  <span class="attr">Articles:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-bookmark</span></span><br><span class="line">  <span class="attr">Tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-tags</span></span><br><span class="line">  <span class="attr">DrawBoard:</span> <span class="string">/Draw/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-paint-brush</span></span><br><span class="line">  <span class="string">Links</span> <span class="string">||</span> <span class="attr">fas fa-list:</span></span><br><span class="line">    <span class="attr">Link List:</span> <span class="string">/link/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-link</span></span><br><span class="line">    <span class="attr">Link-House:</span> <span class="string">https://loveapple.icu/Friend-Link-House/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-newspaper</span></span><br></pre></td></tr></table></figure></p><h2 id="絮语">⚛️絮语</h2><p>第一次部署别人做的开源项目，总有一点忐忑，毕竟自己是纯小白，总是担心会不会违反一些社区规则或者道德标准什么的。写作这篇文章的时候，也会担心会不会犯一些小白错误，贻笑大方。但是私以为，作为新手去学习自己不懂的技术，不能陷入文档的陷阱，即使在没有完全理解每一步都在做什么的情况下，也可以先把系统跑起来，在实践与试错的过程中再去慢慢理解一步步的操作。毕竟，比起一看就让人头大的海量文档，还是自己一步步手操更能让人有“实感”。</p>]]></content:encoded>
      
      
      <category domain="https://loveapple.icu/categories/%E6%8A%80%E6%9C%AF%E5%AE%9E%E8%B7%B5/">技术实践</category>
      
      
      <category domain="https://loveapple.icu/tags/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/">开源项目</category>
      
      <category domain="https://loveapple.icu/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/">服务器</category>
      
      <category domain="https://loveapple.icu/tags/%E7%BD%91%E7%AB%99%E5%BB%BA%E8%AE%BE/">网站建设</category>
      
      <category domain="https://loveapple.icu/tags/RSS%E8%AE%A2%E9%98%85/">RSS订阅</category>
      
      
      <comments>https://loveapple.icu/Blogroll/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>NJU-Undergraduates-Courses</title>
      <link>https://loveapple.icu/NJU-Undergraduates-Courses/</link>
      <guid>https://loveapple.icu/NJU-Undergraduates-Courses/</guid>
      <pubDate>Sat, 16 Aug 2025 13:19:29 GMT</pubDate>
      
      <description>此处存放我与wuhaiyuan同学共同撰写的《南京大学本科生课程体系概论》的一份历史版本。</description>
      
      
      
      <content:encoded><![CDATA[<h3 id="更新">2025/08/27更新</h3><p><strong>本文档后续更新在语雀文档<a href="https://www.yuque.com/greatnju/q-a2.0" rel="external nofollow noreferrer">南哪助手新生问答&amp;指南2.0（2025版）</a>的总则部分-教务 一节中。</strong></p><p><strong>请关注<a href="https://www.yuque.com/greatnju" rel="external nofollow noreferrer">南哪助手语雀文档公开知识库</a>，获取更新更全的南哪情报！</strong></p><hr><p>此处存放我与wuhaiyuan同学共同撰写的《南京大学本科生课程体系概论》的一份历史版本。这篇民间文档会向您介绍关于南京大学本科生的教务、选课、转专业等信息。<iframe src="https://docs.google.com/gview?url=https://raw.githubusercontent.com/LoveApple14434/NJU-Undergraduates-Courses/master/document.pdf&embedded=true" style="width:100%; height:600px;" frameborder="0"></iframe></p>]]></content:encoded>
      
      
      <category domain="https://loveapple.icu/categories/%E6%8C%87%E5%8C%97/">指北</category>
      
      
      <category domain="https://loveapple.icu/tags/NJU/">NJU</category>
      
      
      <comments>https://loveapple.icu/NJU-Undergraduates-Courses/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>DrawBoard食用指北</title>
      <link>https://loveapple.icu/Draw-Board-README/</link>
      <guid>https://loveapple.icu/Draw-Board-README/</guid>
      <pubDate>Thu, 14 Aug 2025 13:31:24 GMT</pubDate>
      
      <description>一个画板小工具的README文档。</description>
      
      
      
      <content:encoded><![CDATA[<blockquote><p>本post专为<a href="loveapple.icu/Draw">LoveApple14434的画板</a>开发。</p></blockquote><h2 id="功能导航">功能导航</h2><p>在<a href="loveapple.icu">LoveApple14434的主页</a>的任意界面中，在右上角导航栏中点击DrawBoard即可进入。</p><h2 id="界面简介">界面简介</h2><figure><img src="/Draw-Board-README/default.png" alt="Draw Board界面"><figcaption aria-hidden="true">Draw Board界面</figcaption></figure><p>在画板的左上角是颜色选取器，支持拖动选色，RGB数字选色，拾色器取色三种选色方式；右上角是预设颜色，点选可直接将其设置为当前颜色。<img src="/Draw-Board-README/color.png" alt="取色器"></p><p>画板的主体位置为<span class="math inline">32 × 32</span>的网格，点击任意格子即可在该格中填入左上角所显示的当前选取的颜色。</p><p>画板下方有<code>User ID</code>与<code>Artwork ID</code>的输入框，如果您想将您的作品保存到服务器端，可以任意输入<code>User ID</code>与<code>Artwork ID</code>，然后点击“上传到云端”按钮，即可将作品保存到服务器；下一次访问时，只要输入相同的<code>User ID</code>与<code>Artwork ID</code>，点击“从云端下载”按钮，即可将之前保存的作品加载到工作区。</p><blockquote><p>注意！上传到服务器的作品会覆盖之前上传过的同<code>User ID</code>与<code>Artwork ID</code>的作品，下载时只会下载最新版本。如果是您的不同作品，为了防止互相冲突，请使用不同的<code>Artwork ID</code>加以区分。如果确实不小心覆盖了，请联系网站管理员为您找回数据。</p><p><code>User ID</code>与<code>Artwork ID</code>并未强制要求为数字，理论上您可以使用UTF-8字符集的任意字符命名。</p></blockquote><p>关于另外四个按钮：“清除画板”按钮顾名思义会将当前工作区整体还原；“食用指北”按钮将跳转到本页面；“保存到本地”按钮可将当前工作区的数据下载为json文件，点击“从本地加载”按钮，并上传之前下载的这个json文件，即可恢复工作区数据。</p><h2 id="絮语">⚛️絮语</h2><p>画板功能是在hexo框架的newpage的markdown文件下，用<code></code>直接包裹HTML语言写出来的。然而笔者在这之前其实根本没学过也没用过HTML/CSS/JavaScript，大部分工作都是根据Deepseek给出的代码做一点小小的微调得到的。至于服务器上部署后端服务，笔者也是第一次尝试，也是根据Deepseek给出的Python代码调试出来的。当然，Deepseek也不是万能的，像部署的流程之类的还是得自己上手去设置，颜色选取器的代码也是我自己改的，Deepseek给的是RGB分为三个滑动条的方案，不仅在不同设备上容易产生显示错误，而且功能也受限，没有屏幕拾色器以及直接输入数字这些好用的功能。但是不得不承认，LLM确实给开发流程带来了极大的改变，在没有LLM的情况下，我是无法想象一个之前从未接触过HTML/CSS/JavaScript的人可以一上手就写出这样一个网站的。</p>]]></content:encoded>
      
      
      <category domain="https://loveapple.icu/categories/%E6%8C%87%E5%8C%97/">指北</category>
      
      
      
      <comments>https://loveapple.icu/Draw-Board-README/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>奶茶电脑之数据拯救</title>
      <link>https://loveapple.icu/MilkTeaComputer/</link>
      <guid>https://loveapple.icu/MilkTeaComputer/</guid>
      <pubDate>Tue, 12 Aug 2025 03:21:44 GMT</pubDate>
      
      <description>奶茶电脑之数据拯救</description>
      
      
      
      <content:encoded><![CDATA[<p>电脑从D面进奶茶了，客户自述尝试过开机但是没反应，并且接单时已经购买了新电脑，于是优先考虑救数据。</p><p>将硬盘拆出使用m2硬盘盒读取，发现有bitlocker加密，登录Microsoft账户后顺利发现4个密钥（真是太幸运了），对每个密钥尝试在PowerShell中使用“manage-bde-unlock 盘符 -rp恢复密钥”命令进行解密，最终成功读取数据。但是这个硬盘是NTFS而客户的新电脑是Mac，因此选择将关键数据上传至客户的njubox中。</p><p>随后我们尝试对进奶茶的电脑进行拯救，经观察电源排线附近的电路被侵蚀比较严重，于是我们尝试拔掉电池使用电源适配器，但是插上后功率计示数为0且按开机键无反应，预计较难拯救。由于屏幕是一个比较优秀的2.8k镜面OLED触摸屏，因此我们选择将硬盘、网卡、屏幕单独拆下交给客户，剩余尸体打包交给客户自行处理。</p><p>番外：在讨论零部件处理方式的时候，江云老师认为只保留硬盘和网卡即可，而承岳老师认为应该将较为贵重的部件拆下出售。此时客户询问IT侠是否需要一些部件，我们认为需要网卡。但是客户临走时，新程老师问了一句“网卡不给她吗”，我误以为之前客户答应将网卡留给我们，于是我说“她说要送给我们来着”，但是客户表示她并没有这样说过，这令我感觉十分惭愧🥲🥲事后我在QQ上对客户进行了解释，客户表示她并不介意。</p><p><img src="/MilkTeaComputer/Image_42963882697944.jpg" width="300"></p>]]></content:encoded>
      
      
      <category domain="https://loveapple.icu/categories/IT%E4%BE%A0%E7%94%B5%E8%84%91%E7%BB%B4%E4%BF%AE/">IT侠电脑维修</category>
      
      
      <category domain="https://loveapple.icu/tags/%E7%BB%8F%E9%AA%8C%E8%AE%B0%E5%BD%95%E5%BD%92%E6%A1%A3/">经验记录归档</category>
      
      <category domain="https://loveapple.icu/tags/%E8%BF%9B%E6%B0%B4%E6%9C%BA/">进水机</category>
      
      
      <comments>https://loveapple.icu/MilkTeaComputer/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>联想供电疑似通病</title>
      <link>https://loveapple.icu/LenovoPower/</link>
      <guid>https://loveapple.icu/LenovoPower/</guid>
      <pubDate>Tue, 12 Aug 2025 03:18:43 GMT</pubDate>
      
      <description>联想供电疑似通病，需要拆卸电池解决。</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="问题描述">问题描述</h2><p>无法开机，具体表现为按电源按钮后键盘背光闪烁，屏幕无画面，外接显示器无画面。</p><h2 id="解决过程">解决过程</h2><p>拔掉电池，连接客户自带的适配器，无法开机。连接工作室其他同学的拯救者适配器，成功开机。装上电池后连接他人适配器，无法开机；拔掉电池后连接他人适配器开机一次，再尝试使用客户自带适配器，成功开机。客户表示可以接受当台式机来用。</p><h2 id="絮语">⚛️絮语</h2><p>我自己使用的Lenovo ideapad720s14曾在2024年一月至二月出现类似供电问题，一开始是连接适配器状态使用过程中会突然掉电关机，再次按电源按钮无法开机，拔插适配器后可以开机。后来发展成一调用独显就会立刻掉电关机，需要拔插适配器才可开机。开学后去工作室断开电池排线，就可以正常使用了。</p><p>建议以后遇到联想笔记本无法开机或者会突然关机的情况，优先尝试断开电源使用适配器供电。</p><h3 id="sep-21-2025更新">Sep 21 2025更新：</h3><p>今天又遇到一台天选也是同样的表现，插上电池就无论如何都无法开机，拔掉电池才能插适配器开机。感觉是某种神秘的电池阻值问题。</p>]]></content:encoded>
      
      
      <category domain="https://loveapple.icu/categories/IT%E4%BE%A0%E7%94%B5%E8%84%91%E7%BB%B4%E4%BF%AE/">IT侠电脑维修</category>
      
      
      <category domain="https://loveapple.icu/tags/%E7%BB%8F%E9%AA%8C%E8%AE%B0%E5%BD%95%E5%BD%92%E6%A1%A3/">经验记录归档</category>
      
      <category domain="https://loveapple.icu/tags/Lenovo/">Lenovo</category>
      
      <category domain="https://loveapple.icu/tags/%E4%BE%9B%E7%94%B5/">供电</category>
      
      
      <comments>https://loveapple.icu/LenovoPower/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>初识ESP32</title>
      <link>https://loveapple.icu/HelloESP32/</link>
      <guid>https://loveapple.icu/HelloESP32/</guid>
      <pubDate>Thu, 07 Aug 2025 10:05:41 GMT</pubDate>
      
      <description>初次使用ESP32：神奇小玩具</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="初识esp32">初识ESP32</h2><p>自己买了一块ESP32的核心板来玩玩，据说这块MCU能跑的频率比较高，性能比较好，而且还集成了WiFi和蓝牙功能，开发工具也比较现代化。</p><p>两个月前自己配过用CMake取代KeiluVision的项目（其实底层还是通过命令行调用Keil带的那个MDK-Arm编译工具链），对CMake算是有一点点基础了解，再加上VSCode是现成的而ArduinoIDE没下载过，于是干脆就跳过ArduinoIDEfor ESP，直接上手ESP-IDF开发。</p><h3 id="什么是esp-idf">什么是ESP-IDF？</h3><p>从原教旨来说，ESP-IDF是乐鑫公司专门为他们的ESP系列MCU定制的一套命令行开发工具，集成了构建、烧录、配置、监视（调试）等等功能。ESP-IDF依赖CMake与Ninja来运行，这与我之前配过的Keil2CMake那个项目也一致，但是ESP-IDF的CMake中主要以ESP-IDF自己定义的一些特殊函数组成，比如<code>idf_build_set_property()</code>以及<code>idf_component_register()</code>等。</p><h3 id="如何上手esp-idf">如何上手ESP-IDF？</h3><p>虽然ESP-IDF需要依赖CMake、Ninja、Python等运行，但是我们并不需要把这些依赖都手动安装一遍（即使你真的手动安装了一遍，ESP-IDF也不会去调用它们的），因为ESP-IDF会自己给自己配一套它需要的环境。我们直接在VSCode的插件商店搜索”ESP-IDF”并安装，在安装好插件后会弹出一个欢迎界面，点击上面的”ConfigureExtension”按钮即可进入ESP-IDF的插件配置页面（如果没见到这个页面的话，在VSCode中按F1然后搜索”&gt;ESP-IDF: configure ESP-IDFExtension”即可），在这里我们可以选用电脑上已下载好的ESP-IDF套件，也可以让它帮我们下载ESP-IDF套件。<img src="/HelloESP32/Configure ESP-IDF.png" alt="Configure ESP-IDF">如果你是初次下载这个插件，电脑上并没有安装过ESP-IDF套件，可以直接点击”EXPRESS”来进行快速配置，或者点击”ADVANCED”来选择指定路径（<del>更推荐这样做，毕竟谁都不希望有东西在自己电脑里拉屎</del>）；如果之后再打开别的ESP项目的时候还弹出这个界面让你配置插件，就可以直接选择”USEEXISTINGSETUP”，快速复用之前的配置。初次下载的时候会比较慢是正常的，以后不用下载了就好了。</p><p>配置好之后，先试试烧一个最简单的示例代码。ESP-IDF会自带很多示例工程，找到之前安装ESP-IDF的文件夹，点进examples里面，找到get-started/hello-world，用vscode打开这个文件夹，就可以配置、构建并烧录你的第一个ESP32工程了。</p><p>打开文件夹之后在页面最下方根据你的开发板型号选择合适的编译与烧录配置。我是从不知名网店买的神秘核心板，应该是非官方型号。板上有CH340，并且看起来没有留JTAG的接口只有一个type-C，所以烧录方式选择的是UART，端口号就选择插上之后在设备管理器里会多出来的那一个，乐鑫设备目标填的是”esp32/customboard”，然后点构建项目、烧录项目就可以了，上手还是很简单的。</p><p>然而在这里我遇到了一点问题：ESP-IDF报告说COM5端口打不开。然而当我自己使用SSCOM之类的串口工具的时候，是可以通过COM5这个串口读到单片机里预先烧好的程序发出的信息的。自习检查ESP-IDF的汇报，发现它说的是MCU没有处在下载模式。经过查询资料发现，下载时单片机的GPIO0引脚需要被拉低，在这个状态下把EN拉低再拉高，才可以进入downloadmode。再查看核心板的原理图，发现GPIO0和EN这两个引脚分别由BOOT和EN这两个按键开关控制。按住BOOT按键，按一下EN按键，松开EN按键后让ESP-IDF开始烧录，就可以成功烧录了，这时候再松开BOOT按键也没关系了。</p><h2 id="絮语">⚛️絮语</h2><p>经过初步的体验，感觉ESP-IDF这一套开发环境的使用体验还是很不错的，不仅仅是表面上看起来更加专业，实际配合VSCode使用起来也比KeiluVision那种卡顿得要死的IDE好很多。</p>]]></content:encoded>
      
      
      <category domain="https://loveapple.icu/categories/%E6%8A%80%E6%9C%AF%E5%AE%9E%E8%B7%B5/">技术实践</category>
      
      
      <category domain="https://loveapple.icu/tags/MCU/">MCU</category>
      
      <category domain="https://loveapple.icu/tags/ESP32/">ESP32</category>
      
      
      <comments>https://loveapple.icu/HelloESP32/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>DDS实现高频信号同步</title>
      <link>https://loveapple.icu/DDS_RFSync/</link>
      <guid>https://loveapple.icu/DDS_RFSync/</guid>
      <pubDate>Sat, 19 Jul 2025 05:09:00 GMT</pubDate>
      
      <description>利用DDS模块，实现高频信号同步，相位可调。</description>
      
      
      
      <content:encoded><![CDATA[<p>食用清单：正点原子探索者开发板v2.2，主控STM32F407ZGT6，DDS模块AD9959（康威科技）</p><p>07月19日</p><p>前天晚上实现了高频信号同步，昨天晚上实现了相位可控。</p><p>原理上很简单：使用外部高频信号取代DDS上的晶振，直接将DDS的时钟挂在外部信号上，这样DDS输出的波形就一定是与外部信号同步的了。</p><p>工作前的基础：已经会使用DDS输出波形。我的驱动是在github上找的一个<a href="https://github.com/Silver-Ray/AD9959_HAL_DRIVER" rel="external nofollow noreferrer">用hal库驱动AD9959</a>（仅移植了这个项目的ad9959.c与ad9959.h，剩下的main和gpio什么的自己随便写写）。</p><p><img src="/DDS_RFSync/Table1.png"></p><p>由于我们要求输出信号与输入信号同频，而DDS的输出信号是数字合成出来的，因此DDS运行的主频是一定要比这个频率高几倍的，因此这里我们需要开启DDS内部的锁相环倍频器。</p><p>查看AD9959手册上的Frequency Range项下的REFCLK MultiplierEnabled子项可知在开启倍频器的情况下，外部输入的参考时钟频率范围为10-125MHz。</p><details class="lake-collapse"><summary id="uf91dd064"><span class="ne-text">私人吐槽</span></summary><p id="uee6c749a" class="ne-p"><span class="ne-text"> &gt; 这个手册上这个表格的缩进做错了…… </span></p><p id="ud9947e4c" class="ne-p"><span class="ne-text"> &gt; 从Internal VCO Output FrequencyRange那一行开始下面的都需要往前减一个缩进…… </span></p><p id="u163a7475" class="ne-p"><span class="ne-text"> &gt;甚至这是整个手册第4页就出现的表格1……也太不上心了…… </span></p></details><p>事实上，如果查看手册后面的Reference ClockModes章节可以发现如下这一段：</p><blockquote><p>…As an alternative to clocking the part directly with a highfrequency clock source, the system clock can be generated using theinternal, PLL-based reference clock multiplier. …</p><p>Enabling the PLL allows multiplication of the reference clockfrequency from 4× to 20×, in integer steps. …</p><p>…</p><p>Note that the output frequency of the PLL is restricted to afrequency range of 100 MHz to 500 MHz. However, there is a VCO gaincontrol bit that must be used appropriately. The VCO gain control bitdefines two ranges (low/high) of frequency output. The VCO gain controlbit defaults to low (see Table 1 for details).</p></blockquote><p>关键信息：PLL锁相环可以将参考时钟倍频，从4倍到20倍，以1倍为步进！</p><p>再结合上面的Table 1，在VCO gain controlbit默认设低的情况下，内部的VCO输出频率范围为100~160MHz；而在设高的情况下，VCO输出频率范围为255-500MHz。这个VCOgain controlbit在哪呢？在FR1寄存器里，跟倍频系数（接下来我们还会再用到这个系数）在一起。<img src="/DDS_RFSync/FR1_1.png"> <img src="/DDS_RFSync/FR1_2.png"></p><p>也就是说这两个东西是在编程的时候可以自己写的一个寄存器。查看我的ad9959.c代码里面的Init函数，里面是这么写的：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">uint8_t</span> FR1_DATA[<span class="number">3</span>] = {<span class="number">0xD3</span>, <span class="number">0x00</span>, <span class="number">0x00</span>}; <span class="comment">// 16 frequency doubling</span></span><br><span class="line"><span class="type">uint8_t</span> CFR_DATA[<span class="number">3</span>] = {<span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x00</span>}; <span class="comment">// default Value = 0x000302</span></span><br><span class="line">_Init_AD9959_GPIO();</span><br><span class="line">InitIO_9959();</span><br><span class="line">InitReset();</span><br><span class="line"></span><br><span class="line">WriteData_AD9959(FR1_ADD, <span class="number">3</span>, FR1_DATA);</span><br><span class="line">WriteData_AD9959(CFR_ADD, <span class="number">3</span>, CFR_DATA);</span><br></pre></td></tr></table></figure><p>稍加计算可以得知这个FR1寄存器里写的0xD30000是0b1101 0011 0000 00000000 0000（按照他的分割方法的话是0b1 10100 11 000……），也就是说VCO gaincontrol设为了1，而PLL dividerratio为20<sub>10</sub>（即0b10100），也就是说我们对REFCLK进行20倍频，并且倍频结果是大于255MHz的。查看模块上外置晶振的丝印可知晶振频率为25MHz，20倍频之后是500MHz，刚好跑在AD9959的上限频率上。那么我们改接跳线帽，使用外接信号取代晶振的时候，外界信号的频率范围就应该为：</p><p><span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.602ex;" xmlns="http://www.w3.org/2000/svg" width="29.342ex" height="4.676ex" role="img" focusable="false" viewbox="0 -1359 12969.2 2067"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/></g><g data-mml-node="TeXAtom" transform="translate(523,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(878,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(1223,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g></g></g><g data-mml-node="mo" transform="translate(2139.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mfrac" transform="translate(3195.6,0)"><g data-mml-node="mrow" transform="translate(220,676)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(500,0)"/><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(1000,0)"/></g><g data-mml-node="mtext" transform="translate(1500,0)"><path data-c="4D" d="M132 622Q125 629 121 631T105 634T62 637H29V683H135Q221 683 232 682T249 675Q250 674 354 398L458 124L562 398Q666 674 668 675Q671 681 683 682T781 683H887V637H854Q814 636 803 634T785 622V61Q791 51 802 49T854 46H887V0H876Q855 3 736 3Q605 3 596 0H585V46H618Q660 47 669 49T688 61V347Q688 424 688 461T688 546T688 613L687 632Q454 14 450 7Q446 1 430 1T410 7Q409 9 292 316L176 624V606Q175 588 175 543T175 463T175 356L176 86Q187 50 261 46H278V0H269Q254 3 154 3Q52 3 37 0H29V46H46Q78 48 98 56T122 69T132 86V622Z"/><path data-c="48" d="M128 622Q121 629 117 631T101 634T58 637H25V683H36Q57 680 180 680Q315 680 324 683H335V637H302Q262 636 251 634T233 622L232 500V378H517V622Q510 629 506 631T490 634T447 637H414V683H425Q446 680 569 680Q704 680 713 683H724V637H691Q651 636 640 634T622 622V61Q628 51 639 49T691 46H724V0H713Q692 3 569 3Q434 3 425 0H414V46H447Q489 47 498 49T517 61V332H232V197L233 61Q239 51 250 49T302 46H335V0H324Q303 3 180 3Q45 3 36 0H25V46H58Q100 47 109 49T128 61V622Z" transform="translate(917,0)"/><path data-c="7A" d="M42 263Q44 270 48 345T53 423V431H393Q399 425 399 415Q399 403 398 402L381 378Q364 355 331 309T265 220L134 41L182 40H206Q254 40 283 46T331 77Q352 105 359 185L361 201Q361 202 381 202H401V196Q401 195 393 103T384 6V0H209L34 1L31 3Q28 8 28 17Q28 30 29 31T160 210T294 394H236Q169 393 152 388Q127 382 113 367Q89 344 82 264V255H42V263Z" transform="translate(1667,0)"/></g></g><g data-mml-node="mn" transform="translate(1525.5,-686)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"/></g><rect width="3811" height="60" x="120" y="220"/></g><g data-mml-node="mo" transform="translate(7524.4,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mn" transform="translate(8580.2,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)"/><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(1000,0)"/><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z" transform="translate(1278,0)"/><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(1778,0)"/></g><g data-mml-node="mtext" transform="translate(10858.2,0)"><path data-c="4D" d="M132 622Q125 629 121 631T105 634T62 637H29V683H135Q221 683 232 682T249 675Q250 674 354 398L458 124L562 398Q666 674 668 675Q671 681 683 682T781 683H887V637H854Q814 636 803 634T785 622V61Q791 51 802 49T854 46H887V0H876Q855 3 736 3Q605 3 596 0H585V46H618Q660 47 669 49T688 61V347Q688 424 688 461T688 546T688 613L687 632Q454 14 450 7Q446 1 430 1T410 7Q409 9 292 316L176 624V606Q175 588 175 543T175 463T175 356L176 86Q187 50 261 46H278V0H269Q254 3 154 3Q52 3 37 0H29V46H46Q78 48 98 56T122 69T132 86V622Z"/><path data-c="48" d="M128 622Q121 629 117 631T101 634T58 637H25V683H36Q57 680 180 680Q315 680 324 683H335V637H302Q262 636 251 634T233 622L232 500V378H517V622Q510 629 506 631T490 634T447 637H414V683H425Q446 680 569 680Q704 680 713 683H724V637H691Q651 636 640 634T622 622V61Q628 51 639 49T691 46H724V0H713Q692 3 569 3Q434 3 425 0H414V46H447Q489 47 498 49T517 61V332H232V197L233 61Q239 51 250 49T302 46H335V0H324Q303 3 180 3Q45 3 36 0H25V46H58Q100 47 109 49T128 61V622Z" transform="translate(917,0)"/><path data-c="7A" d="M42 263Q44 270 48 345T53 423V431H393Q399 425 399 415Q399 403 398 402L381 378Q364 355 331 309T265 220L134 41L182 40H206Q254 40 283 46T331 77Q352 105 359 185L361 201Q361 202 381 202H401V196Q401 195 393 103T384 6V0H209L34 1L31 3Q28 8 28 17Q28 30 29 31T160 210T294 394H236Q169 393 152 388Q127 382 113 367Q89 344 82 264V255H42V263Z" transform="translate(1667,0)"/></g></g></g></svg></mjx-container></span></p><p><span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.602ex;" xmlns="http://www.w3.org/2000/svg" width="26.7ex" height="4.676ex" role="img" focusable="false" viewbox="0 -1359 11801.5 2067"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/></g><g data-mml-node="TeXAtom" transform="translate(523,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(878,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="mi" transform="translate(1407,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g></g></g><g data-mml-node="mo" transform="translate(2250.1,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mfrac" transform="translate(3305.9,0)"><g data-mml-node="mrow" transform="translate(220,676)"><g data-mml-node="mn"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"/><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"/><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1000,0)"/></g><g data-mml-node="mtext" transform="translate(1500,0)"><path data-c="4D" d="M132 622Q125 629 121 631T105 634T62 637H29V683H135Q221 683 232 682T249 675Q250 674 354 398L458 124L562 398Q666 674 668 675Q671 681 683 682T781 683H887V637H854Q814 636 803 634T785 622V61Q791 51 802 49T854 46H887V0H876Q855 3 736 3Q605 3 596 0H585V46H618Q660 47 669 49T688 61V347Q688 424 688 461T688 546T688 613L687 632Q454 14 450 7Q446 1 430 1T410 7Q409 9 292 316L176 624V606Q175 588 175 543T175 463T175 356L176 86Q187 50 261 46H278V0H269Q254 3 154 3Q52 3 37 0H29V46H46Q78 48 98 56T122 69T132 86V622Z"/><path data-c="48" d="M128 622Q121 629 117 631T101 634T58 637H25V683H36Q57 680 180 680Q315 680 324 683H335V637H302Q262 636 251 634T233 622L232 500V378H517V622Q510 629 506 631T490 634T447 637H414V683H425Q446 680 569 680Q704 680 713 683H724V637H691Q651 636 640 634T622 622V61Q628 51 639 49T691 46H724V0H713Q692 3 569 3Q434 3 425 0H414V46H447Q489 47 498 49T517 61V332H232V197L233 61Q239 51 250 49T302 46H335V0H324Q303 3 180 3Q45 3 36 0H25V46H58Q100 47 109 49T128 61V622Z" transform="translate(917,0)"/><path data-c="7A" d="M42 263Q44 270 48 345T53 423V431H393Q399 425 399 415Q399 403 398 402L381 378Q364 355 331 309T265 220L134 41L182 40H206Q254 40 283 46T331 77Q352 105 359 185L361 201Q361 202 381 202H401V196Q401 195 393 103T384 6V0H209L34 1L31 3Q28 8 28 17Q28 30 29 31T160 210T294 394H236Q169 393 152 388Q127 382 113 367Q89 344 82 264V255H42V263Z" transform="translate(1667,0)"/></g></g><g data-mml-node="mn" transform="translate(1525.5,-686)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"/></g><rect width="3811" height="60" x="120" y="220"/></g><g data-mml-node="mo" transform="translate(7634.7,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mn" transform="translate(8690.5,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(500,0)"/></g><g data-mml-node="mtext" transform="translate(9690.5,0)"><path data-c="4D" d="M132 622Q125 629 121 631T105 634T62 637H29V683H135Q221 683 232 682T249 675Q250 674 354 398L458 124L562 398Q666 674 668 675Q671 681 683 682T781 683H887V637H854Q814 636 803 634T785 622V61Q791 51 802 49T854 46H887V0H876Q855 3 736 3Q605 3 596 0H585V46H618Q660 47 669 49T688 61V347Q688 424 688 461T688 546T688 613L687 632Q454 14 450 7Q446 1 430 1T410 7Q409 9 292 316L176 624V606Q175 588 175 543T175 463T175 356L176 86Q187 50 261 46H278V0H269Q254 3 154 3Q52 3 37 0H29V46H46Q78 48 98 56T122 69T132 86V622Z"/><path data-c="48" d="M128 622Q121 629 117 631T101 634T58 637H25V683H36Q57 680 180 680Q315 680 324 683H335V637H302Q262 636 251 634T233 622L232 500V378H517V622Q510 629 506 631T490 634T447 637H414V683H425Q446 680 569 680Q704 680 713 683H724V637H691Q651 636 640 634T622 622V61Q628 51 639 49T691 46H724V0H713Q692 3 569 3Q434 3 425 0H414V46H447Q489 47 498 49T517 61V332H232V197L233 61Q239 51 250 49T302 46H335V0H324Q303 3 180 3Q45 3 36 0H25V46H58Q100 47 109 49T128 61V622Z" transform="translate(917,0)"/><path data-c="7A" d="M42 263Q44 270 48 345T53 423V431H393Q399 425 399 415Q399 403 398 402L381 378Q364 355 331 309T265 220L134 41L182 40H206Q254 40 283 46T331 77Q352 105 359 185L361 201Q361 202 381 202H401V196Q401 195 393 103T384 6V0H209L34 1L31 3Q28 8 28 17Q28 30 29 31T160 210T294 394H236Q169 393 152 388Q127 382 113 367Q89 344 82 264V255H42V263Z" transform="translate(1667,0)"/></g></g></g></svg></mjx-container></span></p><p>这个25MHz看起来是不是不太高？离Table1上标注的最高125MHz还差得远？这是由于除数这个20比较大。如果我们把PLLdivider ratio改到下限4<sub>10</sub>，那么外界信号的频率范围就会是：</p><p><span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.552ex;" xmlns="http://www.w3.org/2000/svg" width="29.342ex" height="4.627ex" role="img" focusable="false" viewbox="0 -1359 12969.2 2045"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/></g><g data-mml-node="TeXAtom" transform="translate(523,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(878,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(1223,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g></g></g><g data-mml-node="mo" transform="translate(2139.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mfrac" transform="translate(3195.6,0)"><g data-mml-node="mrow" transform="translate(220,676)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(500,0)"/><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(1000,0)"/></g><g data-mml-node="mtext" transform="translate(1500,0)"><path data-c="4D" d="M132 622Q125 629 121 631T105 634T62 637H29V683H135Q221 683 232 682T249 675Q250 674 354 398L458 124L562 398Q666 674 668 675Q671 681 683 682T781 683H887V637H854Q814 636 803 634T785 622V61Q791 51 802 49T854 46H887V0H876Q855 3 736 3Q605 3 596 0H585V46H618Q660 47 669 49T688 61V347Q688 424 688 461T688 546T688 613L687 632Q454 14 450 7Q446 1 430 1T410 7Q409 9 292 316L176 624V606Q175 588 175 543T175 463T175 356L176 86Q187 50 261 46H278V0H269Q254 3 154 3Q52 3 37 0H29V46H46Q78 48 98 56T122 69T132 86V622Z"/><path data-c="48" d="M128 622Q121 629 117 631T101 634T58 637H25V683H36Q57 680 180 680Q315 680 324 683H335V637H302Q262 636 251 634T233 622L232 500V378H517V622Q510 629 506 631T490 634T447 637H414V683H425Q446 680 569 680Q704 680 713 683H724V637H691Q651 636 640 634T622 622V61Q628 51 639 49T691 46H724V0H713Q692 3 569 3Q434 3 425 0H414V46H447Q489 47 498 49T517 61V332H232V197L233 61Q239 51 250 49T302 46H335V0H324Q303 3 180 3Q45 3 36 0H25V46H58Q100 47 109 49T128 61V622Z" transform="translate(917,0)"/><path data-c="7A" d="M42 263Q44 270 48 345T53 423V431H393Q399 425 399 415Q399 403 398 402L381 378Q364 355 331 309T265 220L134 41L182 40H206Q254 40 283 46T331 77Q352 105 359 185L361 201Q361 202 381 202H401V196Q401 195 393 103T384 6V0H209L34 1L31 3Q28 8 28 17Q28 30 29 31T160 210T294 394H236Q169 393 152 388Q127 382 113 367Q89 344 82 264V255H42V263Z" transform="translate(1667,0)"/></g></g><g data-mml-node="mn" transform="translate(1775.5,-686)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"/></g><rect width="3811" height="60" x="120" y="220"/></g><g data-mml-node="mo" transform="translate(7524.4,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mn" transform="translate(8580.2,0)"><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z"/><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(500,0)"/><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(1000,0)"/><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z" transform="translate(1278,0)"/><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(1778,0)"/></g><g data-mml-node="mtext" transform="translate(10858.2,0)"><path data-c="4D" d="M132 622Q125 629 121 631T105 634T62 637H29V683H135Q221 683 232 682T249 675Q250 674 354 398L458 124L562 398Q666 674 668 675Q671 681 683 682T781 683H887V637H854Q814 636 803 634T785 622V61Q791 51 802 49T854 46H887V0H876Q855 3 736 3Q605 3 596 0H585V46H618Q660 47 669 49T688 61V347Q688 424 688 461T688 546T688 613L687 632Q454 14 450 7Q446 1 430 1T410 7Q409 9 292 316L176 624V606Q175 588 175 543T175 463T175 356L176 86Q187 50 261 46H278V0H269Q254 3 154 3Q52 3 37 0H29V46H46Q78 48 98 56T122 69T132 86V622Z"/><path data-c="48" d="M128 622Q121 629 117 631T101 634T58 637H25V683H36Q57 680 180 680Q315 680 324 683H335V637H302Q262 636 251 634T233 622L232 500V378H517V622Q510 629 506 631T490 634T447 637H414V683H425Q446 680 569 680Q704 680 713 683H724V637H691Q651 636 640 634T622 622V61Q628 51 639 49T691 46H724V0H713Q692 3 569 3Q434 3 425 0H414V46H447Q489 47 498 49T517 61V332H232V197L233 61Q239 51 250 49T302 46H335V0H324Q303 3 180 3Q45 3 36 0H25V46H58Q100 47 109 49T128 61V622Z" transform="translate(917,0)"/><path data-c="7A" d="M42 263Q44 270 48 345T53 423V431H393Q399 425 399 415Q399 403 398 402L381 378Q364 355 331 309T265 220L134 41L182 40H206Q254 40 283 46T331 77Q352 105 359 185L361 201Q361 202 381 202H401V196Q401 195 393 103T384 6V0H209L34 1L31 3Q28 8 28 17Q28 30 29 31T160 210T294 394H236Q169 393 152 388Q127 382 113 367Q89 344 82 264V255H42V263Z" transform="translate(1667,0)"/></g></g></g></svg></mjx-container></span></p><p><span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.552ex;" xmlns="http://www.w3.org/2000/svg" width="27.831ex" height="4.627ex" role="img" focusable="false" viewbox="0 -1359 12301.5 2045"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/></g><g data-mml-node="TeXAtom" transform="translate(523,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(878,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="mi" transform="translate(1407,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g></g></g><g data-mml-node="mo" transform="translate(2250.1,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mfrac" transform="translate(3305.9,0)"><g data-mml-node="mrow" transform="translate(220,676)"><g data-mml-node="mn"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"/><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"/><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1000,0)"/></g><g data-mml-node="mtext" transform="translate(1500,0)"><path data-c="4D" d="M132 622Q125 629 121 631T105 634T62 637H29V683H135Q221 683 232 682T249 675Q250 674 354 398L458 124L562 398Q666 674 668 675Q671 681 683 682T781 683H887V637H854Q814 636 803 634T785 622V61Q791 51 802 49T854 46H887V0H876Q855 3 736 3Q605 3 596 0H585V46H618Q660 47 669 49T688 61V347Q688 424 688 461T688 546T688 613L687 632Q454 14 450 7Q446 1 430 1T410 7Q409 9 292 316L176 624V606Q175 588 175 543T175 463T175 356L176 86Q187 50 261 46H278V0H269Q254 3 154 3Q52 3 37 0H29V46H46Q78 48 98 56T122 69T132 86V622Z"/><path data-c="48" d="M128 622Q121 629 117 631T101 634T58 637H25V683H36Q57 680 180 680Q315 680 324 683H335V637H302Q262 636 251 634T233 622L232 500V378H517V622Q510 629 506 631T490 634T447 637H414V683H425Q446 680 569 680Q704 680 713 683H724V637H691Q651 636 640 634T622 622V61Q628 51 639 49T691 46H724V0H713Q692 3 569 3Q434 3 425 0H414V46H447Q489 47 498 49T517 61V332H232V197L233 61Q239 51 250 49T302 46H335V0H324Q303 3 180 3Q45 3 36 0H25V46H58Q100 47 109 49T128 61V622Z" transform="translate(917,0)"/><path data-c="7A" d="M42 263Q44 270 48 345T53 423V431H393Q399 425 399 415Q399 403 398 402L381 378Q364 355 331 309T265 220L134 41L182 40H206Q254 40 283 46T331 77Q352 105 359 185L361 201Q361 202 381 202H401V196Q401 195 393 103T384 6V0H209L34 1L31 3Q28 8 28 17Q28 30 29 31T160 210T294 394H236Q169 393 152 388Q127 382 113 367Q89 344 82 264V255H42V263Z" transform="translate(1667,0)"/></g></g><g data-mml-node="mn" transform="translate(1775.5,-686)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"/></g><rect width="3811" height="60" x="120" y="220"/></g><g data-mml-node="mo" transform="translate(7634.7,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mn" transform="translate(8690.5,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)"/><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(1000,0)"/></g><g data-mml-node="mtext" transform="translate(10190.5,0)"><path data-c="4D" d="M132 622Q125 629 121 631T105 634T62 637H29V683H135Q221 683 232 682T249 675Q250 674 354 398L458 124L562 398Q666 674 668 675Q671 681 683 682T781 683H887V637H854Q814 636 803 634T785 622V61Q791 51 802 49T854 46H887V0H876Q855 3 736 3Q605 3 596 0H585V46H618Q660 47 669 49T688 61V347Q688 424 688 461T688 546T688 613L687 632Q454 14 450 7Q446 1 430 1T410 7Q409 9 292 316L176 624V606Q175 588 175 543T175 463T175 356L176 86Q187 50 261 46H278V0H269Q254 3 154 3Q52 3 37 0H29V46H46Q78 48 98 56T122 69T132 86V622Z"/><path data-c="48" d="M128 622Q121 629 117 631T101 634T58 637H25V683H36Q57 680 180 680Q315 680 324 683H335V637H302Q262 636 251 634T233 622L232 500V378H517V622Q510 629 506 631T490 634T447 637H414V683H425Q446 680 569 680Q704 680 713 683H724V637H691Q651 636 640 634T622 622V61Q628 51 639 49T691 46H724V0H713Q692 3 569 3Q434 3 425 0H414V46H447Q489 47 498 49T517 61V332H232V197L233 61Q239 51 250 49T302 46H335V0H324Q303 3 180 3Q45 3 36 0H25V46H58Q100 47 109 49T128 61V622Z" transform="translate(917,0)"/><path data-c="7A" d="M42 263Q44 270 48 345T53 423V431H393Q399 425 399 415Q399 403 398 402L381 378Q364 355 331 309T265 220L134 41L182 40H206Q254 40 283 46T331 77Q352 105 359 185L361 201Q361 202 381 202H401V196Q401 195 393 103T384 6V0H209L34 1L31 3Q28 8 28 17Q28 30 29 31T160 210T294 394H236Q169 393 152 388Q127 382 113 367Q89 344 82 264V255H42V263Z" transform="translate(1667,0)"/></g></g></g></svg></mjx-container></span></p><p>这个频率看起来就高多了。在实际应用中，我们可以根据实际输入的信号频率来调整这个PLLdividerratio的取值，找到一个合适的范围。如果频率非常低，甚至低于前面那个12.75MHz，也可以把VCOgain control bit改为0，这样被除数就会从255-500MHz降低到100-160MHz。</p><p>言归正传，我们现在用一个最粗暴的方法先来尝试一下信号同步。既然板上的晶振跑在25MHz，那我们就把跳线帽从接晶振改接为接SMA接口，然后用信号源给一个25MHz信号，编程让DDS也输出一个25MHz的信号，按理说这个合成的25MHz应该和外界参考25MHz同步。但是放到示波器上却发现波形在缓慢移动，并且速度还很均匀，没有左右来回晃动或者时快时慢，而是均匀缓慢地移动。这说明我们输出的波形虽然是“来源于”外部参考信号，但是设置的频率并没有设得跟外部参考信号完全一致。</p><p>为了解决这个问题，我们来看一下，当我们在代码中“设置频率”的时候，我们到底在做什么？下面贴一下我拿到的原始代码片段：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief Writes the frequency value to the specified channel.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param Channel The channel number to write the frequency to.(0 to 3)</span></span><br><span class="line"><span class="comment"> * @param Freq The frequency value to be written.(1 to 500000000)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Write_Frequence</span><span class="params">(<span class="type">uint8_t</span> Channel, <span class="type">uint32_t</span> Freq)</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">if</span> (Freq &gt; <span class="number">500000000</span> || Freq &lt; <span class="number">1</span>)</span><br><span class="line">    {</span><br><span class="line">        Freq = <span class="number">114514</span>;</span><br><span class="line">        AD9959_error();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span> CFTW0_DATA[<span class="number">4</span>] = {<span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>};</span><br><span class="line">    Freq2Word(Freq, CFTW0_DATA);</span><br><span class="line">    Channel_Select(Channel);</span><br><span class="line">    WriteData_AD9959(CFTW0_ADD, <span class="number">4</span>, CFTW0_DATA); <span class="comment">// CTW0 address 0x04.Output CH0 setting frequency</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>这段代码是我们直接调用的函数，里面只有一个检查频率范围是否正确，不正确的话调用一个错误函数，然后把频率转化为频率字，再选择通道，写寄存器。选择通道和写寄存器的过程大概率不会有问题，那么关键问题就是这个Freq2Word的过程中发生了什么。按F12跳转到定义发现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Freq2Word</span><span class="params">(<span class="type">double</span> f, <span class="type">uint8_t</span> *fWord)</span></span><br><span class="line">{</span><br><span class="line">    <span class="comment">// fWord 4 bytes</span></span><br><span class="line">    <span class="type">uint32_t</span> Temp;</span><br><span class="line">    Temp = (<span class="type">uint32_t</span>)f * <span class="number">8.589934592</span>; </span><br><span class="line">    <span class="comment">// The input frequency factor is divided into four bytes.  8.589934592=(2^32)/500000000</span></span><br><span class="line">    fWord[<span class="number">3</span>] = (<span class="type">uint8_t</span>)Temp;</span><br><span class="line">    fWord[<span class="number">2</span>] = (<span class="type">uint8_t</span>)(Temp &gt;&gt; <span class="number">8</span>);</span><br><span class="line">    fWord[<span class="number">1</span>] = (<span class="type">uint8_t</span>)(Temp &gt;&gt; <span class="number">16</span>);</span><br><span class="line">    fWord[<span class="number">0</span>] = (<span class="type">uint8_t</span>)(Temp &gt;&gt; <span class="number">24</span>);</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>也就是说他把我们的频率（浮点型）直接乘以一个神秘系数，然后取整赋值到4个byte的数据。这个神秘系数的来源写在了注释里（谢天谢地他写了注释），是<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.816ex;" xmlns="http://www.w3.org/2000/svg" width="5.077ex" height="3.041ex" role="img" focusable="false" viewbox="0 -983.7 2243.8 1344.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="msup" transform="translate(665.8,394) scale(0.707)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"/><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)"/></g></g></g><g data-mml-node="mrow" transform="translate(220,-345) scale(0.707)"><g data-mml-node="mn"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"/><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"/><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1000,0)"/></g><g data-mml-node="mi" transform="translate(1500,0)"><path data-c="1D440" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"/></g></g><rect width="2003.8" height="60" x="120" y="220"/></g></g></g></svg></mjx-container></span>，这个500M熟不熟悉？就是刚刚的25MHz晶振20倍频之后得到的500MHz，也就是DDS主频。也就是说DDS会把0到主频这个频率范围映射到频率字的<span class="math inline">0 − 2<sup>32</sup></span>上。</p><p>那么这时我们的输出频率无法跟输入的25MHz完全同步的原因也就很显然了：<span class="math display">25 × 10<sup>6</sup> × 8.589934592 = 214748364.8</span>，在取整到整型的时候会损失掉0.8。那么是不是我们用整数除法代替这个神秘的浮点乘法就能解决这个问题呢？其实不然。尝试<span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.602ex;" xmlns="http://www.w3.org/2000/svg" width="27.41ex" height="4.676ex" role="img" focusable="false" viewbox="0 -1359 12115.1 2067"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g><g data-mml-node="TeXAtom" transform="translate(533,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"/><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)"/></g></g></g><g data-mml-node="mo" transform="translate(1512.3,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"/></g><g data-mml-node="mfrac" transform="translate(2512.6,0)"><g data-mml-node="mrow" transform="translate(470,676)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(500,0)"/></g><g data-mml-node="mi" transform="translate(1000,0)"><path data-c="1D440" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"/></g></g><g data-mml-node="mrow" transform="translate(220,-686)"><g data-mml-node="mn"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"/><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"/><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1000,0)"/></g><g data-mml-node="mi" transform="translate(1500,0)"><path data-c="1D440" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"/></g></g><rect width="2751" height="60" x="120" y="220"/></g><g data-mml-node="mo" transform="translate(5781.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mn" transform="translate(6837.1,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(500,0)"/><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z" transform="translate(1000,0)"/><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z" transform="translate(1500,0)"/><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z" transform="translate(2000,0)"/><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z" transform="translate(2500,0)"/><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" transform="translate(3000,0)"/><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" transform="translate(3500,0)"/><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z" transform="translate(4000,0)"/><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(4500,0)"/><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z" transform="translate(4778,0)"/></g></g></g></svg></mjx-container></span>，结果和刚才完全一样。也就是说，这个取整损失0.8的问题并不是由浮点乘法带来的，而是2<sup>32</sup>本就无法被20整除，问题的关键在于我们的PLLdivider ratio取了20，不是一个2<sup>32</sup>能够整除的数。</p><p>那么问题的解决办法也很显然了：就像之前降主频的时候做的一样，这里我们把PLLdividerratio调整到16（为了能被2<sup>32</sup>整除，只能取4，8，16这三种），然后在Freq2Word的时候给神秘系数额外乘上2.5，就可以同步上了。为了将PLLdivider ratio 改为16，那么FR1寄存器应该是0b1 10000 110000…=0xC30000。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">uint8_t</span> FR1_DATA[<span class="number">3</span>] = {<span class="number">0xC3</span>, <span class="number">0x00</span>, <span class="number">0x00</span>}; <span class="comment">// 16 frequency doubling</span></span><br><span class="line"><span class="type">uint8_t</span> CFR_DATA[<span class="number">3</span>] = {<span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x00</span>}; <span class="comment">// default Value = 0x000302</span></span><br><span class="line">_Init_AD9959_GPIO();</span><br><span class="line">InitIO_9959();</span><br><span class="line">InitReset();</span><br><span class="line"></span><br><span class="line">WriteData_AD9959(FR1_ADD, <span class="number">3</span>, FR1_DATA);</span><br><span class="line">WriteData_AD9959(CFR_ADD, <span class="number">3</span>, CFR_DATA);</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Freq2Word</span><span class="params">(<span class="type">double</span> f, <span class="type">uint8_t</span> *fWord)</span></span><br><span class="line">{</span><br><span class="line">    <span class="comment">// fWord 4 bytes</span></span><br><span class="line">    <span class="type">uint32_t</span> Temp;</span><br><span class="line">    Temp = (<span class="type">uint32_t</span>)f * <span class="number">8.589934592</span> * <span class="number">2.5</span>; <span class="comment">// The input frequency factor is divided into four bytes.  8.589934592=(2^32)/500000000</span></span><br><span class="line">    fWord[<span class="number">3</span>] = (<span class="type">uint8_t</span>)Temp;</span><br><span class="line">    fWord[<span class="number">2</span>] = (<span class="type">uint8_t</span>)(Temp &gt;&gt; <span class="number">8</span>);</span><br><span class="line">    fWord[<span class="number">1</span>] = (<span class="type">uint8_t</span>)(Temp &gt;&gt; <span class="number">16</span>);</span><br><span class="line">    fWord[<span class="number">0</span>] = (<span class="type">uint8_t</span>)(Temp &gt;&gt; <span class="number">24</span>);</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>缓慢调整信号源提供的外部信号频率，可以发现DDS输出频率也在跟着变，并且在示波器上两个波形相对静止还挺稳定的，效果还是不错的。</p><p>同步上了非常高兴，晚上美美下班。然而第二天过来再测了一下发现天塌了。虽然确实能同步上了，但是输出信号与输入信号的相位差略显随机。每次重启都会显示出不同的相位差，并且固定在-98度，-8度，+82度，+172度这四种取值附近随机刷新一个（可恶的倍频器！）。于是当天的任务就变成了怎么把相位也同步上。</p><p>AD9959是可以设置输出信号的相位的，并且是0-359度可调，步进1度。如果能让单片机知道目前的相位差是多少，那么要调整过去就很简单了。那么接下来的事情就很明显了：用一个鉴相器输出REFCLK和OUTPUT之间的相位差（一般是映射到直流电平上），用ADC采集这个直流电平，然后调整回去。</p><p>从隔壁组借来一个鉴相器，用信号源和示波器先简单测一下，发现相位差越小输出电平越高，范围大概是40mV-1.9V，可以直接拿ADC采集。czq同学反复告诫我输入的信号强度不能超过0dbm，换算一下大概是300mV的VPeak，而AD9959的Table1给出的范围是200mV-1000mV，也还算是在范围内，能用。</p><p>把电路接好：信号源给出参考信号同时接到示波器通道1，DDS的REFCLK，以及鉴相器的一个输入端；DDS的输出端接到示波器的通道2以及鉴相器的另一个输入端；鉴相器的输出端接到单片机的ADC上。再简单编一个程序，demo里就粗暴一点把360个相位全遍历一遍，用ADC检测哪个相位时电平最高就把哪个相位记录下来就行。</p><p>尝试跑了一下，发现每次输出都有一个固定的20度相位差，并且重启单片机也不会改变；在单片机上打印了一下检测到的最高电平，倒也确实是1.9V左右。<del>反正是在做工程不是搞学术，也顾不得那么多了，直接手动给他加上个20度。</del>再稍微改进了一下代码，遍历360个相位也太慢了，根据ADC检测到的信号大小可以反馈调节，ADC检测到电平比较低的时候可以步子迈大一点嘛直接跳过去，然后再加一个遍历次数的限制，最终程序就写好了：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">   <span class="type">uint16_t</span> max=<span class="number">0</span>, temp=<span class="number">0</span>, i=<span class="number">0</span>, cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (max&lt;<span class="number">2500</span> &amp;&amp; cnt&lt;<span class="number">50</span>) {</span><br><span class="line">Write_Phase(<span class="number">1</span>, i);</span><br><span class="line">AD9959_IO_Update();</span><br><span class="line">delay_ms(<span class="number">10</span>);</span><br><span class="line">temp=Get_Adc_Average(ADC_CHANNEL_0, <span class="number">20</span>);</span><br><span class="line"><span class="keyword">if</span> (max&lt;temp) {</span><br><span class="line">max=temp;</span><br><span class="line">phase0=i;</span><br><span class="line">}</span><br><span class="line">i+=<span class="number">60</span>*(<span class="number">2500</span>-temp)/<span class="number">2500</span>;</span><br><span class="line">i%=<span class="number">360</span>;</span><br><span class="line">cnt+=<span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//phase0+=26;</span></span><br><span class="line">phase0+=<span class="number">20</span>;</span><br><span class="line">phase0%=<span class="number">360</span>;</span><br><span class="line"></span><br><span class="line">Write_Phase(<span class="number">1</span>, phase0);</span><br><span class="line">AD9959_IO_Update();</span><br><span class="line">LCD_ShowString(<span class="number">0</span>, lcddev.height<span class="number">-40</span>, <span class="number">320</span>, <span class="number">32</span>, <span class="number">32</span>, (u8*)<span class="string">"synchronized!"</span>);</span><br></pre></td></tr></table></figure><p>最终实现的效果也还是不错的，详见测试视频</p><details class="lake-collapse"><summary id="ue6012e39"><span class="ne-text">测试视频在此……吗？</span></summary><p id="ua70eb212" class="ne-p"><span class="ne-text">……本来想上传视频的结果语雀上传视频要会员，那算了。</span><span class="ne-text" style="text-decoration: line-through">吃大份去吧语雀</span></p></details>]]></content:encoded>
      
      
      <category domain="https://loveapple.icu/categories/%E9%AB%98%E9%A2%91%E7%94%B5%E8%B7%AF/">高频电路</category>
      
      
      <category domain="https://loveapple.icu/tags/NUEDC/">NUEDC</category>
      
      <category domain="https://loveapple.icu/tags/EE/">EE</category>
      
      <category domain="https://loveapple.icu/tags/DDS/">DDS</category>
      
      
      <comments>https://loveapple.icu/DDS_RFSync/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>NUEDC-2022-F</title>
      <link>https://loveapple.icu/NUEDC-2022-F/</link>
      <guid>https://loveapple.icu/NUEDC-2022-F/</guid>
      <pubDate>Sat, 05 Jul 2025 03:41:00 GMT</pubDate>
      
      <description>做电赛往年题的经验：2022年电赛F题。</description>
      
      
      
      <content:encoded><![CDATA[<p><img src="/NUEDC-2022-F/topic.jpeg"></p><p>增加额外要求：AM载波取消500kHz步进限制，可能是10M-30M任意频率</p><p>07月05日</p><p>AM波</p><p>技术路线</p><p>测量任务：使用单片机GPIO口结合定时器读取载波频率，然后用DDS产生比载波频率略低的本振进行混频，混到低频区后进行低通滤波结合ADC采集，进行FFT，然后找到三个峰值即可计算调制频率与调制深度；</p><p>解调任务：使用包络检波解调AM波确保波形同源。</p><p>测量任务深入：单片机GPIO口读取采用定时器计数器输入，只能读取高低电平，因此使用高速比较器将AM载波转化成与载波同频的方波再进行测量；又由于AM调制会有一部分幅度过低，比较器可能无法比较，因此使用74HC4046锁相环先将载波频率进行锁定再比较。</p><p>实测效果</p><p>载波频率：将理想正弦波（假设锁相环已锁定）输入比较器，比较器波形输出至单片机定时计数器的外部触发接口，载波频率测量可测DC-30M+，经过参数调试误差为10Hz数量级；如果将调幅波直接输入至比较器，最高可到0.8调制深度；经过一级放大，最高可至0.98调制深度。</p><p>DDS：写了一个可自由调试的UI，包括点频扫频，可自由调整频率与幅度；缺陷：DDS有时会无响应或错误响应，需要重新发送指令，有时甚至需要重启单片机；产生波形略有失真，可能是阻抗匹配问题（示波器FFT查看，除主频外最大谐波相对幅度-28dB）。</p><p>ADC&amp;FFT：调制频率由于频域分辨率x的影响会有十来赫兹的误差，但是由于步进是1kHz所以可以直接取整解决；调制深度计算还需要调试一下参数，总的来说还是正相关的。如果不做任何处理直接FFT，当调制深度低于30%的时候可能会产生信噪比过低，边带被噪声淹没的问题；编写了一个频域上比较严格的滤除算法之后，可以探测到低至约6%的调制深度。</p><p>07月10日</p><p>AM的测试有点困难，主要是调制深度达到1.0时载波频率会有差不多20kHz的误差，导致之前的混频到10.7kHz的技术方案不太可行，决定改为混频到约50kHz，用更高的采样率去采集。</p><p>今日先测通了FM路线。</p><p>载波频率：锁相环锁定范围3-8.5MHz，使用34MHz起始，-4MHz步进本振进行混频后递交给锁相环，以4-8MHz作为有效锁定频段，利用定时器计数器统计脉冲数计算锁定频率反推载波频率，误差10Hz数量级。</p><p>调制频率，调制系数，最大频偏：利用锁相环鉴频器进行FM解调，使用ADC采集解调波形，计算极大值均值与极小值均值作差，进行FFT提取主频率，进而利用Excel的预测线功能拟合计算调制系数，发现不同采集轮次之间波动较大，采用新旧值1：3加权平均的方式进行稳定，误差基本在0.2以内。</p><p>代码调试小技巧：当最终版代码需要全自动化运行，而你又需要先进行调试时，在自动化代码中加入</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">LCD_ShowString(<span class="number">0</span>, <span class="number">0</span>, <span class="number">160</span>, <span class="number">32</span>, <span class="number">32</span>, (u8*)<span class="string">"waiting"</span>);</span><br><span class="line">key=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (key!=KEY0_PRES) {</span><br><span class="line">key=KEY_Scan(<span class="number">0</span>);</span><br><span class="line">}</span><br><span class="line">key=<span class="number">0</span>;</span><br><span class="line">LCD_Fill(<span class="number">0</span>, <span class="number">0</span>, lcddev.width, lcddev.height, GRED);</span><br></pre></td></tr></table></figure><p>以及更多LCD_Show系列代码，以达到单步调试的目的。（按KEY0进行下一步）</p><p>07月11日</p><p>将整个系统调通了。</p><p>锁相环的锁定频率存在欺骗行为：在大约3<sub>10MHz能正常锁定，在大约10</sub>12MHz<strong>输出的锁定频率随输入频率增加而下降</strong>，而我们检测只能检测锁相环的输出频率（利用定时器计数器），因此我们即使接收到3<sub>10MHz的锁定信号，我们也不能确定锁相环的输入信号就是同频率信号还是10</sub>12MHz的“欺骗信号”。解决方法是：我们规定4<sub>8MHz为有效锁定范围；由于待测信号载波频率范围为10</sub>30MHz，因此我们将DDS本振从38MHz开始向下以1MHz为步进推进直到14MHz为止（共计25个频点），混频后交给锁相环尝试锁定，依然使用单片机的定时器计数器测量锁相环的输出频率，以推算出的载波频率连续三次在误差范围内近似相同为判定载波频率的依据。具体代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">         success_cnt=<span class="number">0</span>;</span><br><span class="line">round_cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">25</span>; i+=<span class="number">1</span>) {</span><br><span class="line">dds_rate=<span class="number">38</span>*MHz-(<span class="type">uint32_t</span>)i*MHz;</span><br><span class="line">DDS_data_stack.freq1[<span class="number">0</span>]=dds_rate;</span><br><span class="line">DDS_data_stack.channel_state[<span class="number">0</span>]=CHANNEL_STATE_SINGLE;</span><br><span class="line">dds_task((DDS_data*)&amp;DDS_data_stack);</span><br><span class="line"><span class="comment">// LCD_ShowNum(0, 240, dds_rate, 9, 32);</span></span><br><span class="line">ChangeSwitchState(Switch_mlt, Swch_mlt_base);</span><br><span class="line">LCD_ShowString(<span class="number">0</span>, lcddev.height<span class="number">-40</span>, <span class="number">400</span>, <span class="number">32</span>, <span class="number">32</span>, (u8*)<span class="string">"Counting Frequency...   "</span>);</span><br><span class="line">delay_ms(<span class="number">50</span>);</span><br><span class="line">HAL_TIM_Base_Start_IT(&amp;htim4);</span><br><span class="line">delay_ms(<span class="number">300</span>);</span><br><span class="line">HAL_TIM_Base_Stop_IT(&amp;htim4);</span><br><span class="line"><span class="keyword">if</span> (base_freq&gt;<span class="number">3.8</span>*MHz &amp;&amp; base_freq&lt;<span class="number">8.2</span>*MHz) {</span><br><span class="line"><span class="type">uint32_t</span> temp=dds_rate-base_freq;</span><br><span class="line"><span class="comment">// LCD_ShowNum(160, 500, temp, 9, 32);</span></span><br><span class="line"><span class="comment">// LCD_ShowNum(160, 460, fm_base_freq, 9, 32);</span></span><br><span class="line"><span class="keyword">if</span> (success_cnt==<span class="number">0</span>) {</span><br><span class="line">fm_base_freq=temp;</span><br><span class="line">success_cnt=<span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (abs_minus(fm_base_freq, temp)&lt;<span class="number">250</span>*kHz) {</span><br><span class="line"><span class="comment">// LCD_ShowNum(160, 540, abs_minus(fm_base_freq, temp), 9, 32);</span></span><br><span class="line">fm_base_freq=temp;</span><br><span class="line">success_cnt+=<span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span> {</span><br><span class="line">success_cnt=<span class="number">1</span>;</span><br><span class="line">fm_base_freq=temp;</span><br><span class="line">}</span><br><span class="line"><span class="comment">// LCD_ShowNum(120, 500, success_cnt, 1, 32);</span></span><br><span class="line"><span class="keyword">if</span> (success_cnt==<span class="number">3</span>) {</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span> {</span><br><span class="line">success_cnt=<span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">// LCD_ShowString(0, 0, 160, 32, 32, (u8*)"waiting");</span></span><br><span class="line"><span class="comment">// while (key!=KEY0_PRES) {</span></span><br><span class="line"><span class="comment">// key=KEY_Scan(0);</span></span><br><span class="line"><span class="comment">// }</span></span><br><span class="line"><span class="comment">// key=0;</span></span><br><span class="line"><span class="comment">// LCD_Fill(0, 0, lcddev.width, lcddev.height, GRED);</span></span><br><span class="line">}</span><br><span class="line"><span class="type">uint32_t</span> temp2=fm_base_freq-fm_base_freq%(<span class="number">500</span>*kHz);</span><br><span class="line"><span class="keyword">if</span> (fm_base_freq-temp2&gt;<span class="number">250</span>*kHz) </span><br><span class="line">temp2+=<span class="number">500</span>*kHz;</span><br><span class="line">fm_base_freq=temp2; </span><br></pre></td></tr></table></figure><p>由于赛题中对FM有500kHz步进的规定，因此我们将测得的频率直接拟合到最近的500kHz整数倍频即可。对于AM去掉最后47~50行，会有大约几十kHz的误差。为了准确测得AM的频率，我们将AM混频到大约80kHz处，使用300kHz的采样率进行ADC采集，再进行FFT，找到主带频率反推AM频率，误差可降低到0.1kHz以内。</p><p>今日花了较多时间用来调试代码的自动化测试流程。目前的代码架构逻辑大致如下：</p><p><img src="/NUEDC-2022-F/yuque_mind.jpeg"></p><p><img src="/NUEDC-2022-F/yuque_mind.jpeg"></p><p>具体细节参看代码与代码注释。</p><p>本题的主要困难点在于对AM取消了500kHz步进限制，这样在AM调制深度较深时会较难获取到AM的载波频率，也就很难进行下一步测量。放大器+比较器然后用计数器计数的方案最高只能做到0.97左右的调制深度，到1.0之后就会有MHz级别的误差了，必须要采用锁相环才能稍微测准一点（10kHz数量级）；而锁相环的锁定范围又不可能覆盖10~30MHz整个带宽（在我们的硬件中，甚至完全不在这个带宽之内），因此要么用多个锁相环来回切换，要么选择进行混频后尝试锁定，多次尝试找到正确的频率。</p>]]></content:encoded>
      
      
      <category domain="https://loveapple.icu/categories/%E9%AB%98%E9%A2%91%E7%94%B5%E8%B7%AF/">高频电路</category>
      
      
      <category domain="https://loveapple.icu/tags/NUEDC/">NUEDC</category>
      
      <category domain="https://loveapple.icu/tags/EE/">EE</category>
      
      
      <comments>https://loveapple.icu/NUEDC-2022-F/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
