<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LoveApple14434的主页</title>
  
  
  <link href="https://loveapple.icu/atom.xml" rel="self"/>
  
  <link href="https://loveapple.icu/"/>
  <updated>2025-09-09T07:14:07.582Z</updated>
  <id>https://loveapple.icu/</id>
  
  <author>
    <name>LoveApple14434</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>部署Friend-Link-House项目:开源社区初探</title>
    <link href="https://loveapple.icu/2025/09/09/%E9%83%A8%E7%BD%B2Friend-Link-House%E9%A1%B9%E7%9B%AE-%E5%BC%80%E6%BA%90%E7%A4%BE%E5%8C%BA%E5%88%9D%E6%8E%A2/"/>
    <id>https://loveapple.icu/2025/09/09/%E9%83%A8%E7%BD%B2Friend-Link-House%E9%A1%B9%E7%9B%AE-%E5%BC%80%E6%BA%90%E7%A4%BE%E5%8C%BA%E5%88%9D%E6%8E%A2/</id>
    <published>2025-09-09T03:09:41.000Z</published>
    <updated>2025-09-09T07:14:07.582Z</updated>
    
    <content type="html"><![CDATA[<h1 id="从何而来">从何而来</h1><p>在与<a href="github.com/idealclover">翠翠</a>学长交换友链的时候，接触到了学长的<a href="https://github.com/idealclover/Friend-Link-House">Friend-Link-House</a>这个项目，基于<a href="https://github.com/nju-lug/blogroll">BlogRoll</a>这个项目而来，可以自动订阅他人博客网站上的文章，感觉很有意思，于是想给自己也部署一个。</p><h1 id="如何进展">如何进展</h1><h2 id="先跑起来再说">先跑起来再说</h2><p>首先把仓库fork一份到自己的账户底下，然后clone到了我的服务器上，跑了一遍<code>npm install</code><code>npm run gen</code><code>npm run dev</code>，没遇到什么困难就可以看到网页了。</p><h2 id="订阅源的替换">订阅源的替换</h2><p>接下来就是把订阅的链接从学长的朋友们换成我的朋友们。从学长写好的README以及对main.js的分析中可以得知，每次访问这个网页的时候都会从存储的各RSS源获取最新的xml，而这些RSS源的url则来自于运行<code>npm run gen</code>命令时，从README.md中的表格里提取的信息。手动把表格里的数据换成了目前已经添加友链的几个朋友<del>（反正也没几条，手动复制一下了）</del>，重新跑一遍<code>npm run gen</code><code>npm run dev</code>，就可以看我的朋友们的文章了。</p><h2 id="前端页面样式的修改">前端页面样式的修改</h2><p>虽然跑起来了，但是这个页面的风格跟学长的页面还是完全一致的，总感觉有点忐忑<del>（虽然说只要遵循了MIT许可证就并不会被认为抄袭什么的）</del>，而且这个页面的风格和我自己的<a href="lovapple.icu">个人主页</a>的风格也不太一致。后端没什么我能动手的地方，但是前端的样式还是可以自己scratch一下的。修改了一下背景的颜色，用卡片之类的样式把时间轴上的每篇blog包裹了一下，看起来就跟主页上的风格比较类似了。</p><h2 id="部署到域名">部署到域名</h2><p>使用nginx进行反向代理，一开始写入的配置如下 <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Friend-Link-House代理到友链屋</span><br><span class="line">location /Friend-Link-House/ <span class="punctuation">{</span></span><br><span class="line">root/data/Friend-Link-House/web/dist/;</span><br><span class="line">indexindex.html;</span><br><span class="line"><span class="punctuation">}</span></span><br></pre></td></tr></table></figure>运行<code>nginx -s reload</code>之后，尝试访问<code>loveapple.icu/Friend-Link-House</code>，结果报错503。本来以为是权限的问题，但是提权了之后依然无法访问。遂询问deepseek老师，发现关键是nginx配置反代时的语法，用<code>root</code>会拼接到后面导致访问的位置出错，应该改成<code>alias</code>，最终配置如下：<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># Friend-Link-House代理到友链屋</span><br><span class="line">location /Friend-Link-House/ <span class="punctuation">{</span></span><br><span class="line">alias/data/Friend-Link-House/web/dist/;</span><br><span class="line">indexindex.html;</span><br><span class="line">try_files $uri $uri/ /newspaper/index.html;</span><br><span class="line"><span class="punctuation">}</span></span><br><span class="line">#资源配置路径</span><br><span class="line">location /assets/ <span class="punctuation">{</span></span><br><span class="line">alias /data/Friend-Link-House/web/dist/assets/;</span><br><span class="line">expires <span class="number">1</span>y;</span><br><span class="line">add_header Cache-Control public;</span><br><span class="line"><span class="punctuation">}</span></span><br></pre></td></tr></table></figure> 经测试即可愉快访问这个域名了。</p><h2 id="主页入口">主页入口</h2><p>有了域名之后，下一个问题就是如何把这个新的页面与原有的主页整合起来。我的个人主页是用hexo博客框架搭建的，使用了butterfly主题。这个主题有一个<code>menu</code>配置项，可以在右上角显示一个菜单栏，可以自定义跳转的相对链接、绝对链接，还可以自定义图标。于是速速配置如下：<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">Home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="comment"># List||fas fa-list:</span></span><br><span class="line">    <span class="comment"># Music: /music/ || fas fa-music</span></span><br><span class="line">    <span class="comment"># Movie: /movies/ || fas fa-video</span></span><br><span class="line">  <span class="attr">Articles:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-bookmark</span></span><br><span class="line">  <span class="attr">Tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-tags</span></span><br><span class="line">  <span class="attr">DrawBoard:</span> <span class="string">/Draw/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-paint-brush</span></span><br><span class="line">  <span class="string">Links</span> <span class="string">||</span> <span class="attr">fas fa-list:</span></span><br><span class="line">    <span class="attr">Link List:</span> <span class="string">/link/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-link</span></span><br><span class="line">    <span class="attr">Link-House:</span> <span class="string">https://loveapple.icu/Friend-Link-House/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-newspaper</span></span><br></pre></td></tr></table></figure></p><h1 id="絮语">絮语</h1><p>第一次部署别人做的开源项目，总有一点忐忑，毕竟自己是纯小白，总是担心会不会违反一些社区规则或者道德标准什么的。写作这篇文章的时候，也会担心会不会犯一些小白错误，贻笑大方。但是私以为，作为新手去学习自己不懂的技术，不能陷入文档的陷阱，即使在没有完全理解每一步都在做什么的情况下，也可以先把系统跑起来，在实践与试错的过程中再去慢慢理解一步步的操作。毕竟，比起一看就让人头大的海量文档，还是自己一步步手操更能让人有“实感”。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;从何而来&quot;&gt;从何而来&lt;/h1&gt;
&lt;p&gt;在与&lt;a href=&quot;github.com/idealclover&quot;&gt;翠翠&lt;/a&gt;学长交换友链的时候，接触到了学长的&lt;a href=&quot;https://github.com/idealclover/Friend-Link-Ho</summary>
      
    
    
    
    <category term="技术实践" scheme="https://loveapple.icu/categories/%E6%8A%80%E6%9C%AF%E5%AE%9E%E8%B7%B5/"/>
    
    
    <category term="开源" scheme="https://loveapple.icu/tags/%E5%BC%80%E6%BA%90/"/>
    
    <category term="服务器" scheme="https://loveapple.icu/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    <category term="网站建设" scheme="https://loveapple.icu/tags/%E7%BD%91%E7%AB%99%E5%BB%BA%E8%AE%BE/"/>
    
    <category term="RSS订阅" scheme="https://loveapple.icu/tags/RSS%E8%AE%A2%E9%98%85/"/>
    
  </entry>
  
  <entry>
    <title>NJU-Undergraduates-Courses</title>
    <link href="https://loveapple.icu/2025/08/16/NJU-Undergraduates-Courses/"/>
    <id>https://loveapple.icu/2025/08/16/NJU-Undergraduates-Courses/</id>
    <published>2025-08-16T13:19:29.000Z</published>
    <updated>2025-08-27T14:25:23.344Z</updated>
    
    <content type="html"><![CDATA[<h3 id="更新">2025/08/27更新</h3><p><strong>本文档后续更新在语雀文档<a href="https://www.yuque.com/greatnju/q-a2.0">南哪助手新生问答&amp;指南2.0（2025版）</a>的总则部分-教务 一节中。</strong></p><p><strong>请关注<a href="https://www.yuque.com/greatnju">南哪助手语雀文档公开知识库</a>，获取更新更全的南哪情报！</strong></p><hr><p>此处存放我与wuhaiyuan同学共同撰写的《南京大学本科生课程体系概论》的一份历史版本。这篇民间文档会向您介绍关于南京大学本科生的教务、选课、转专业等信息。<iframe src="https://docs.google.com/gview?url=https://raw.githubusercontent.com/LoveApple14434/NJU-Undergraduates-Courses/master/document.pdf&embedded=true" style="width:100%; height:600px;" frameborder="0"></iframe></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;更新&quot;&gt;2025/08/27更新&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;本文档后续更新在语雀文档&lt;a href=&quot;https://www.yuque.com/greatnju/q-a2.0&quot;&gt;南哪助手新生问答&amp;amp;指南2.0（2025版）&lt;/a&gt;的
总则部分-教</summary>
      
    
    
    
    <category term="README" scheme="https://loveapple.icu/categories/README/"/>
    
    
    <category term="NJU" scheme="https://loveapple.icu/tags/NJU/"/>
    
  </entry>
  
  <entry>
    <title>DrawBoard食用指北</title>
    <link href="https://loveapple.icu/2025/08/14/Draw-Board-README/"/>
    <id>https://loveapple.icu/2025/08/14/Draw-Board-README/</id>
    <published>2025-08-14T13:31:24.000Z</published>
    <updated>2025-08-14T14:07:29.166Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本post专为<a href="loveapple.icu/Draw">LoveApple14434的画板</a>开发。</p></blockquote><h1 id="功能导航">功能导航</h1><p>在<a href="loveapple.icu">LoveApple14434的主页</a>的任意界面中，在右上角导航栏中点击DrawBoard即可进入。</p><h1 id="界面简介">界面简介</h1><figure><img src="/2025/08/14/Draw-Board-README/default.png" alt="Draw Board界面"><figcaption aria-hidden="true">Draw Board界面</figcaption></figure><p>在画板的左上角是颜色选取器，支持拖动选色，RGB数字选色，拾色器取色三种选色方式；右上角是预设颜色，点选可直接将其设置为当前颜色。<img src="/2025/08/14/Draw-Board-README/color.png" alt="取色器"></p><p>画板的主体位置为<span class="math inline">32 × 32</span>的网格，点击任意格子即可在该格中填入左上角所显示的当前选取的颜色。</p><p>画板下方有<code>User ID</code>与<code>Artwork ID</code>的输入框，如果您想将您的作品保存到服务器端，可以任意输入<code>User ID</code>与<code>Artwork ID</code>，然后点击“上传到云端”按钮，即可将作品保存到服务器；下一次访问时，只要输入相同的<code>User ID</code>与<code>Artwork ID</code>，点击“从云端下载”按钮，即可将之前保存的作品加载到工作区。</p><blockquote><p>注意！上传到服务器的作品会覆盖之前上传过的同<code>User ID</code>与<code>Artwork ID</code>的作品，下载时只会下载最新版本。如果是您的不同作品，为了防止互相冲突，请使用不同的<code>Artwork ID</code>加以区分。如果确实不小心覆盖了，请联系网站管理员为您找回数据。</p><p><code>User ID</code>与<code>Artwork ID</code>并未强制要求为数字，理论上您可以使用UTF-8字符集的任意字符命名。</p></blockquote><p>关于另外四个按钮：“清除画板”按钮顾名思义会将当前工作区整体还原；“食用指北”按钮将跳转到本页面；“保存到本地”按钮可将当前工作区的数据下载为json文件，点击“从本地加载”按钮，并上传之前下载的这个json文件，即可恢复工作区数据。</p><h1 id="絮语">絮语</h1><p>画板功能是在hexo框架的newpage的markdown文件下，用<code></code>直接包裹HTML语言写出来的。然而笔者在这之前其实根本没学过也没用过HTML/CSS/JavaScript，大部分工作都是根据Deepseek给出的代码做一点小小的微调得到的。至于服务器上部署后端服务，笔者也是第一次尝试，也是根据Deepseek给出的Python代码调试出来的。当然，Deepseek也不是万能的，像部署的流程之类的还是得自己上手去设置，颜色选取器的代码也是我自己改的，Deepseek给的是RGB分为三个滑动条的方案，不仅在不同设备上容易产生显示错误，而且功能也受限，没有屏幕拾色器以及直接输入数字这些好用的功能。但是不得不承认，LLM确实给开发流程带来了极大的改变，在没有LLM的情况下，我是无法想象一个之前从未接触过HTML/CSS/JavaScript的人可以一上手就写出这样一个网站的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本post专为&lt;a href=&quot;loveapple.icu/Draw&quot;&gt;LoveApple14434的画板&lt;/a&gt;开发。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;功能导航&quot;&gt;功能导航&lt;/h1&gt;
&lt;p&gt;在&lt;a href=&quot;love</summary>
      
    
    
    
    <category term="README" scheme="https://loveapple.icu/categories/README/"/>
    
    
  </entry>
  
  <entry>
    <title>奶茶电脑之数据拯救</title>
    <link href="https://loveapple.icu/2025/08/12/%E5%A5%B6%E8%8C%B6%E7%94%B5%E8%84%91%E4%B9%8B%E6%95%B0%E6%8D%AE%E6%8B%AF%E6%95%91/"/>
    <id>https://loveapple.icu/2025/08/12/%E5%A5%B6%E8%8C%B6%E7%94%B5%E8%84%91%E4%B9%8B%E6%95%B0%E6%8D%AE%E6%8B%AF%E6%95%91/</id>
    <published>2025-08-12T03:21:44.000Z</published>
    <updated>2025-08-12T03:25:30.894Z</updated>
    
    <content type="html"><![CDATA[<p>电脑从D面进奶茶了，客户自述尝试过开机但是没反应，并且接单时已经购买了新电脑，于是优先考虑救数据。</p><p>将硬盘拆出使用m2硬盘盒读取，发现有bitlocker加密，登录Microsoft账户后顺利发现4个密钥（真是太幸运了），对每个密钥尝试在PowerShell中使用“manage-bde-unlock 盘符 -rp恢复密钥”命令进行解密，最终成功读取数据。但是这个硬盘是NTFS而客户的新电脑是Mac，因此选择将关键数据上传至客户的njubox中。</p><p>随后我们尝试对进奶茶的电脑进行拯救，经观察电源排线附近的电路被侵蚀比较严重，于是我们尝试拔掉电池使用电源适配器，但是插上后功率计示数为0且按开机键无反应，预计较难拯救。由于屏幕是一个比较优秀的2.8k镜面OLED触摸屏，因此我们选择将硬盘、网卡、屏幕单独拆下交给客户，剩余尸体打包交给客户自行处理。</p><p>番外：在讨论零部件处理方式的时候，江云老师认为只保留硬盘和网卡即可，而承岳老师认为应该将较为贵重的部件拆下出售。此时客户询问IT侠是否需要一些部件，我们认为需要网卡。但是客户临走时，新程老师问了一句“网卡不给她吗”，我误以为之前客户答应将网卡留给我们，于是我说“她说要送给我们来着”，但是客户表示她并没有这样说过，这令我感觉十分惭愧🥲🥲事后我在QQ上对客户进行了解释，客户表示她并不介意。</p><p><img src="/2025/08/12/%E5%A5%B6%E8%8C%B6%E7%94%B5%E8%84%91%E4%B9%8B%E6%95%B0%E6%8D%AE%E6%8B%AF%E6%95%91/Image_42963882697944.jpg" width="300"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;电脑从D面进奶茶了，客户自述尝试过开机但是没反应，并且接单时已经购买了新电脑，于是优先考虑救数据。&lt;/p&gt;
&lt;p&gt;将硬盘拆出使用m2硬盘盒读取，发现有bitlocker加密，登录Microsoft账户后顺利发现4个密钥（真是太幸运了），对每个密钥尝试在PowerShell</summary>
      
    
    
    
    <category term="IT侠电脑维修" scheme="https://loveapple.icu/categories/IT%E4%BE%A0%E7%94%B5%E8%84%91%E7%BB%B4%E4%BF%AE/"/>
    
    
    <category term="经验记录归档" scheme="https://loveapple.icu/tags/%E7%BB%8F%E9%AA%8C%E8%AE%B0%E5%BD%95%E5%BD%92%E6%A1%A3/"/>
    
    <category term="进水机" scheme="https://loveapple.icu/tags/%E8%BF%9B%E6%B0%B4%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>联想供电疑似通病</title>
    <link href="https://loveapple.icu/2025/08/12/%E8%81%94%E6%83%B3%E4%BE%9B%E7%94%B5%E7%96%91%E4%BC%BC%E9%80%9A%E7%97%85/"/>
    <id>https://loveapple.icu/2025/08/12/%E8%81%94%E6%83%B3%E4%BE%9B%E7%94%B5%E7%96%91%E4%BC%BC%E9%80%9A%E7%97%85/</id>
    <published>2025-08-12T03:18:43.000Z</published>
    <updated>2025-08-12T03:21:32.748Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题描述">问题描述</h1><p>无法开机，具体表现为按电源按钮后键盘背光闪烁，屏幕无画面，外接显示器无画面。</p><h1 id="解决过程">解决过程</h1><p>拔掉电池，连接客户自带的适配器，无法开机。连接工作室其他同学的拯救者适配器，成功开机。装上电池后连接他人适配器，无法开机；拔掉电池后连接他人适配器开机一次，再尝试使用客户自带适配器，成功开机。客户表示可以接受当台式机来用。</p><h1 id="絮语">絮语</h1><p>我自己使用的Lenovo ideapad720s14曾在2024年一月至二月出现类似供电问题，一开始是连接适配器状态使用过程中会突然掉电关机，再次按电源按钮无法开机，拔插适配器后可以开机。后来发展成一调用独显就会立刻掉电关机，需要拔插适配器才可开机。开学后去工作室断开电池排线，就可以正常使用了。</p><p>建议以后遇到联想笔记本无法开机或者会突然关机的情况，优先尝试断开电源使用适配器供电。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;问题描述&quot;&gt;问题描述&lt;/h1&gt;
&lt;p&gt;无法开机，具体表现为按电源按钮后键盘背光闪烁，屏幕无画面，外接显示器无画面。&lt;/p&gt;
&lt;h1 id=&quot;解决过程&quot;&gt;解决过程&lt;/h1&gt;
&lt;p&gt;拔掉电池，连接客户自带的适配器，无法开机。连接工作室其他同学的拯救者适配器，成功</summary>
      
    
    
    
    <category term="IT侠电脑维修" scheme="https://loveapple.icu/categories/IT%E4%BE%A0%E7%94%B5%E8%84%91%E7%BB%B4%E4%BF%AE/"/>
    
    
    <category term="经验记录归档" scheme="https://loveapple.icu/tags/%E7%BB%8F%E9%AA%8C%E8%AE%B0%E5%BD%95%E5%BD%92%E6%A1%A3/"/>
    
    <category term="Lenovo" scheme="https://loveapple.icu/tags/Lenovo/"/>
    
    <category term="供电" scheme="https://loveapple.icu/tags/%E4%BE%9B%E7%94%B5/"/>
    
  </entry>
  
  <entry>
    <title>初识ESP32</title>
    <link href="https://loveapple.icu/2025/08/07/%E5%88%9D%E8%AF%86ESP32/"/>
    <id>https://loveapple.icu/2025/08/07/%E5%88%9D%E8%AF%86ESP32/</id>
    <published>2025-08-07T10:05:41.000Z</published>
    <updated>2025-08-12T03:17:44.086Z</updated>
    
    <content type="html"><![CDATA[<h1 id="初识esp32">初识ESP32</h1><p>自己买了一块ESP32的核心板来玩玩，据说这块MCU能跑的频率比较高，性能比较好，而且还集成了WiFi和蓝牙功能，开发工具也比较现代化。</p><p>两个月前自己配过用CMake取代KeiluVision的项目（其实底层还是通过命令行调用Keil带的那个MDK-Arm编译工具链），对CMake算是有一点点基础了解，再加上VSCode是现成的而ArduinoIDE没下载过，于是干脆就跳过ArduinoIDEfor ESP，直接上手ESP-IDF开发。</p><h2 id="什么是esp-idf">什么是ESP-IDF？</h2><p>从原教旨来说，ESP-IDF是乐鑫公司专门为他们的ESP系列MCU定制的一套命令行开发工具，集成了构建、烧录、配置、监视（调试）等等功能。ESP-IDF依赖CMake与Ninja来运行，这与我之前配过的Keil2CMake那个项目也一致，但是ESP-IDF的CMake中主要以ESP-IDF自己定义的一些特殊函数组成，比如<code>idf_build_set_property()</code>以及<code>idf_component_register()</code>等。</p><h2 id="如何上手esp-idf">如何上手ESP-IDF？</h2><p>虽然ESP-IDF需要依赖CMake、Ninja、Python等运行，但是我们并不需要把这些依赖都手动安装一遍（即使你真的手动安装了一遍，ESP-IDF也不会去调用它们的），因为ESP-IDF会自己给自己配一套它需要的环境。我们直接在VSCode的插件商店搜索”ESP-IDF”并安装，在安装好插件后会弹出一个欢迎界面，点击上面的”ConfigureExtension”按钮即可进入ESP-IDF的插件配置页面（如果没见到这个页面的话，在VSCode中按F1然后搜索”&gt;ESP-IDF: configure ESP-IDFExtension”即可），在这里我们可以选用电脑上已下载好的ESP-IDF套件，也可以让它帮我们下载ESP-IDF套件。<img src="/2025/08/07/%E5%88%9D%E8%AF%86ESP32/Configure ESP-IDF.png" alt="Configure ESP-IDF">如果你是初次下载这个插件，电脑上并没有安装过ESP-IDF套件，可以直接点击”EXPRESS”来进行快速配置，或者点击”ADVANCED”来选择指定路径（<del>更推荐这样做，毕竟谁都不希望有东西在自己电脑里拉屎</del>）；如果之后再打开别的ESP项目的时候还弹出这个界面让你配置插件，就可以直接选择”USEEXISTINGSETUP”，快速复用之前的配置。初次下载的时候会比较慢是正常的，以后不用下载了就好了。</p><p>配置好之后，先试试烧一个最简单的示例代码。ESP-IDF会自带很多示例工程，找到之前安装ESP-IDF的文件夹，点进examples里面，找到get-started/hello-world，用vscode打开这个文件夹，就可以配置、构建并烧录你的第一个ESP32工程了。</p><p>打开文件夹之后在页面最下方根据你的开发板型号选择合适的编译与烧录配置。我是从不知名网店买的神秘核心板，应该是非官方型号。板上有CH340，并且看起来没有留JTAG的接口只有一个type-C，所以烧录方式选择的是UART，端口号就选择插上之后在设备管理器里会多出来的那一个，乐鑫设备目标填的是”esp32/customboard”，然后点构建项目、烧录项目就可以了，上手还是很简单的。</p><p>然而在这里我遇到了一点问题：ESP-IDF报告说COM5端口打不开。然而当我自己使用SSCOM之类的串口工具的时候，是可以通过COM5这个串口读到单片机里预先烧好的程序发出的信息的。自习检查ESP-IDF的汇报，发现它说的是MCU没有处在下载模式。经过查询资料发现，下载时单片机的GPIO0引脚需要被拉低，在这个状态下把EN拉低再拉高，才可以进入downloadmode。再查看核心板的原理图，发现GPIO0和EN这两个引脚分别由BOOT和EN这两个按键开关控制。按住BOOT按键，按一下EN按键，松开EN按键后让ESP-IDF开始烧录，就可以成功烧录了，这时候再松开BOOT按键也没关系了。</p><h1 id="絮语">絮语</h1><p>经过初步的体验，感觉ESP-IDF这一套开发环境的使用体验还是很不错的，不仅仅是表面上看起来更加专业，实际配合VSCode使用起来也比KeiluVision那种卡顿得要死的IDE好很多。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;初识esp32&quot;&gt;初识ESP32&lt;/h1&gt;
&lt;p&gt;自己买了一块ESP32的核心板来玩玩，据说这块MCU能跑的频率比较高，性能比较好，而且还集成了WiFi和蓝牙功能，开发工具也比较现代化。&lt;/p&gt;
&lt;p&gt;两个月前自己配过用CMake取代Keil
uVision</summary>
      
    
    
    
    <category term="EE" scheme="https://loveapple.icu/categories/EE/"/>
    
    
    <category term="MCU" scheme="https://loveapple.icu/tags/MCU/"/>
    
    <category term="ESP32" scheme="https://loveapple.icu/tags/ESP32/"/>
    
  </entry>
  
  <entry>
    <title>DDS实现高频信号同步</title>
    <link href="https://loveapple.icu/2025/07/19/DDS%E5%AE%9E%E7%8E%B0%E9%AB%98%E9%A2%91%E4%BF%A1%E5%8F%B7%E5%90%8C%E6%AD%A5/"/>
    <id>https://loveapple.icu/2025/07/19/DDS%E5%AE%9E%E7%8E%B0%E9%AB%98%E9%A2%91%E4%BF%A1%E5%8F%B7%E5%90%8C%E6%AD%A5/</id>
    <published>2025-07-19T05:09:00.000Z</published>
    <updated>2025-08-12T03:17:34.534Z</updated>
    
    <content type="html"><![CDATA[<p>食用清单：正点原子探索者开发板v2.2，主控STM32F407ZGT6，DDS模块AD9959（康威科技）</p><p>07月19日</p><p>前天晚上实现了高频信号同步，昨天晚上实现了相位可控。</p><p>原理上很简单：使用外部高频信号取代DDS上的晶振，直接将DDS的时钟挂在外部信号上，这样DDS输出的波形就一定是与外部信号同步的了。</p><p>工作前的基础：已经会使用DDS输出波形。我的驱动是在github上找的一个<a href="https://github.com/Silver-Ray/AD9959_HAL_DRIVER">用hal库驱动AD9959</a>（仅移植了这个项目的ad9959.c与ad9959.h，剩下的main和gpio什么的自己随便写写）。</p><p><img src="/2025/07/19/DDS%E5%AE%9E%E7%8E%B0%E9%AB%98%E9%A2%91%E4%BF%A1%E5%8F%B7%E5%90%8C%E6%AD%A5/Table1.png"></p><p>由于我们要求输出信号与输入信号同频，而DDS的输出信号是数字合成出来的，因此DDS运行的主频是一定要比这个频率高几倍的，因此这里我们需要开启DDS内部的锁相环倍频器。</p><p>查看AD9959手册上的Frequency Range项下的REFCLK MultiplierEnabled子项可知在开启倍频器的情况下，外部输入的参考时钟频率范围为10-125MHz。</p><details class="lake-collapse"><summary id="uf91dd064"><span class="ne-text">私人吐槽</span></summary><p id="uee6c749a" class="ne-p"><span class="ne-text"> &gt; 这个手册上这个表格的缩进做错了…… </span></p><p id="ud9947e4c" class="ne-p"><span class="ne-text"> &gt; 从Internal VCO Output FrequencyRange那一行开始下面的都需要往前减一个缩进…… </span></p><p id="u163a7475" class="ne-p"><span class="ne-text"> &gt;甚至这是整个手册第4页就出现的表格1……也太不上心了…… </span></p></details><p>事实上，如果查看手册后面的Reference ClockModes章节可以发现如下这一段：</p><blockquote><p>…As an alternative to clocking the part directly with a highfrequency clock source, the system clock can be generated using theinternal, PLL-based reference clock multiplier. …</p><p>Enabling the PLL allows multiplication of the reference clockfrequency from 4× to 20×, in integer steps. …</p><p>…</p><p>Note that the output frequency of the PLL is restricted to afrequency range of 100 MHz to 500 MHz. However, there is a VCO gaincontrol bit that must be used appropriately. The VCO gain control bitdefines two ranges (low/high) of frequency output. The VCO gain controlbit defaults to low (see Table 1 for details).</p></blockquote><p>关键信息：PLL锁相环可以将参考时钟倍频，从4倍到20倍，以1倍为步进！</p><p>再结合上面的Table 1，在VCO gain controlbit默认设低的情况下，内部的VCO输出频率范围为100~160MHz；而在设高的情况下，VCO输出频率范围为255-500MHz。这个VCOgain controlbit在哪呢？在FR1寄存器里，跟倍频系数（接下来我们还会再用到这个系数）在一起。<img src="/2025/07/19/DDS%E5%AE%9E%E7%8E%B0%E9%AB%98%E9%A2%91%E4%BF%A1%E5%8F%B7%E5%90%8C%E6%AD%A5/FR1_1.png"> <img src="/2025/07/19/DDS%E5%AE%9E%E7%8E%B0%E9%AB%98%E9%A2%91%E4%BF%A1%E5%8F%B7%E5%90%8C%E6%AD%A5/FR1_2.png"></p><p>也就是说这两个东西是在编程的时候可以自己写的一个寄存器。查看我的ad9959.c代码里面的Init函数，里面是这么写的：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">uint8_t</span> FR1_DATA[<span class="number">3</span>] = {<span class="number">0xD3</span>, <span class="number">0x00</span>, <span class="number">0x00</span>}; <span class="comment">// 16 frequency doubling</span></span><br><span class="line"><span class="type">uint8_t</span> CFR_DATA[<span class="number">3</span>] = {<span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x00</span>}; <span class="comment">// default Value = 0x000302</span></span><br><span class="line">_Init_AD9959_GPIO();</span><br><span class="line">InitIO_9959();</span><br><span class="line">InitReset();</span><br><span class="line"></span><br><span class="line">WriteData_AD9959(FR1_ADD, <span class="number">3</span>, FR1_DATA);</span><br><span class="line">WriteData_AD9959(CFR_ADD, <span class="number">3</span>, CFR_DATA);</span><br></pre></td></tr></table></figure><p>稍加计算可以得知这个FR1寄存器里写的0xD30000是0b1101 0011 0000 00000000 0000（按照他的分割方法的话是0b1 10100 11 000……），也就是说VCO gaincontrol设为了1，而PLL dividerratio为20<sub>10</sub>（即0b10100），也就是说我们对REFCLK进行20倍频，并且倍频结果是大于255MHz的。查看模块上外置晶振的丝印可知晶振频率为25MHz，20倍频之后是500MHz，刚好跑在AD9959的上限频率上。那么我们改接跳线帽，使用外接信号取代晶振的时候，外界信号的频率范围就应该为：</p><p><span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.602ex;" xmlns="http://www.w3.org/2000/svg" width="29.342ex" height="4.676ex" role="img" focusable="false" viewbox="0 -1359 12969.2 2067"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/></g><g data-mml-node="TeXAtom" transform="translate(523,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(878,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(1223,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g></g></g><g data-mml-node="mo" transform="translate(2139.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mfrac" transform="translate(3195.6,0)"><g data-mml-node="mrow" transform="translate(220,676)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(500,0)"/><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(1000,0)"/></g><g data-mml-node="mtext" transform="translate(1500,0)"><path data-c="4D" d="M132 622Q125 629 121 631T105 634T62 637H29V683H135Q221 683 232 682T249 675Q250 674 354 398L458 124L562 398Q666 674 668 675Q671 681 683 682T781 683H887V637H854Q814 636 803 634T785 622V61Q791 51 802 49T854 46H887V0H876Q855 3 736 3Q605 3 596 0H585V46H618Q660 47 669 49T688 61V347Q688 424 688 461T688 546T688 613L687 632Q454 14 450 7Q446 1 430 1T410 7Q409 9 292 316L176 624V606Q175 588 175 543T175 463T175 356L176 86Q187 50 261 46H278V0H269Q254 3 154 3Q52 3 37 0H29V46H46Q78 48 98 56T122 69T132 86V622Z"/><path data-c="48" d="M128 622Q121 629 117 631T101 634T58 637H25V683H36Q57 680 180 680Q315 680 324 683H335V637H302Q262 636 251 634T233 622L232 500V378H517V622Q510 629 506 631T490 634T447 637H414V683H425Q446 680 569 680Q704 680 713 683H724V637H691Q651 636 640 634T622 622V61Q628 51 639 49T691 46H724V0H713Q692 3 569 3Q434 3 425 0H414V46H447Q489 47 498 49T517 61V332H232V197L233 61Q239 51 250 49T302 46H335V0H324Q303 3 180 3Q45 3 36 0H25V46H58Q100 47 109 49T128 61V622Z" transform="translate(917,0)"/><path data-c="7A" d="M42 263Q44 270 48 345T53 423V431H393Q399 425 399 415Q399 403 398 402L381 378Q364 355 331 309T265 220L134 41L182 40H206Q254 40 283 46T331 77Q352 105 359 185L361 201Q361 202 381 202H401V196Q401 195 393 103T384 6V0H209L34 1L31 3Q28 8 28 17Q28 30 29 31T160 210T294 394H236Q169 393 152 388Q127 382 113 367Q89 344 82 264V255H42V263Z" transform="translate(1667,0)"/></g></g><g data-mml-node="mn" transform="translate(1525.5,-686)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"/></g><rect width="3811" height="60" x="120" y="220"/></g><g data-mml-node="mo" transform="translate(7524.4,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mn" transform="translate(8580.2,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)"/><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(1000,0)"/><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z" transform="translate(1278,0)"/><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(1778,0)"/></g><g data-mml-node="mtext" transform="translate(10858.2,0)"><path data-c="4D" d="M132 622Q125 629 121 631T105 634T62 637H29V683H135Q221 683 232 682T249 675Q250 674 354 398L458 124L562 398Q666 674 668 675Q671 681 683 682T781 683H887V637H854Q814 636 803 634T785 622V61Q791 51 802 49T854 46H887V0H876Q855 3 736 3Q605 3 596 0H585V46H618Q660 47 669 49T688 61V347Q688 424 688 461T688 546T688 613L687 632Q454 14 450 7Q446 1 430 1T410 7Q409 9 292 316L176 624V606Q175 588 175 543T175 463T175 356L176 86Q187 50 261 46H278V0H269Q254 3 154 3Q52 3 37 0H29V46H46Q78 48 98 56T122 69T132 86V622Z"/><path data-c="48" d="M128 622Q121 629 117 631T101 634T58 637H25V683H36Q57 680 180 680Q315 680 324 683H335V637H302Q262 636 251 634T233 622L232 500V378H517V622Q510 629 506 631T490 634T447 637H414V683H425Q446 680 569 680Q704 680 713 683H724V637H691Q651 636 640 634T622 622V61Q628 51 639 49T691 46H724V0H713Q692 3 569 3Q434 3 425 0H414V46H447Q489 47 498 49T517 61V332H232V197L233 61Q239 51 250 49T302 46H335V0H324Q303 3 180 3Q45 3 36 0H25V46H58Q100 47 109 49T128 61V622Z" transform="translate(917,0)"/><path data-c="7A" d="M42 263Q44 270 48 345T53 423V431H393Q399 425 399 415Q399 403 398 402L381 378Q364 355 331 309T265 220L134 41L182 40H206Q254 40 283 46T331 77Q352 105 359 185L361 201Q361 202 381 202H401V196Q401 195 393 103T384 6V0H209L34 1L31 3Q28 8 28 17Q28 30 29 31T160 210T294 394H236Q169 393 152 388Q127 382 113 367Q89 344 82 264V255H42V263Z" transform="translate(1667,0)"/></g></g></g></svg></mjx-container></span></p><p><span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.602ex;" xmlns="http://www.w3.org/2000/svg" width="26.7ex" height="4.676ex" role="img" focusable="false" viewbox="0 -1359 11801.5 2067"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/></g><g data-mml-node="TeXAtom" transform="translate(523,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(878,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="mi" transform="translate(1407,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g></g></g><g data-mml-node="mo" transform="translate(2250.1,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mfrac" transform="translate(3305.9,0)"><g data-mml-node="mrow" transform="translate(220,676)"><g data-mml-node="mn"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"/><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"/><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1000,0)"/></g><g data-mml-node="mtext" transform="translate(1500,0)"><path data-c="4D" d="M132 622Q125 629 121 631T105 634T62 637H29V683H135Q221 683 232 682T249 675Q250 674 354 398L458 124L562 398Q666 674 668 675Q671 681 683 682T781 683H887V637H854Q814 636 803 634T785 622V61Q791 51 802 49T854 46H887V0H876Q855 3 736 3Q605 3 596 0H585V46H618Q660 47 669 49T688 61V347Q688 424 688 461T688 546T688 613L687 632Q454 14 450 7Q446 1 430 1T410 7Q409 9 292 316L176 624V606Q175 588 175 543T175 463T175 356L176 86Q187 50 261 46H278V0H269Q254 3 154 3Q52 3 37 0H29V46H46Q78 48 98 56T122 69T132 86V622Z"/><path data-c="48" d="M128 622Q121 629 117 631T101 634T58 637H25V683H36Q57 680 180 680Q315 680 324 683H335V637H302Q262 636 251 634T233 622L232 500V378H517V622Q510 629 506 631T490 634T447 637H414V683H425Q446 680 569 680Q704 680 713 683H724V637H691Q651 636 640 634T622 622V61Q628 51 639 49T691 46H724V0H713Q692 3 569 3Q434 3 425 0H414V46H447Q489 47 498 49T517 61V332H232V197L233 61Q239 51 250 49T302 46H335V0H324Q303 3 180 3Q45 3 36 0H25V46H58Q100 47 109 49T128 61V622Z" transform="translate(917,0)"/><path data-c="7A" d="M42 263Q44 270 48 345T53 423V431H393Q399 425 399 415Q399 403 398 402L381 378Q364 355 331 309T265 220L134 41L182 40H206Q254 40 283 46T331 77Q352 105 359 185L361 201Q361 202 381 202H401V196Q401 195 393 103T384 6V0H209L34 1L31 3Q28 8 28 17Q28 30 29 31T160 210T294 394H236Q169 393 152 388Q127 382 113 367Q89 344 82 264V255H42V263Z" transform="translate(1667,0)"/></g></g><g data-mml-node="mn" transform="translate(1525.5,-686)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"/></g><rect width="3811" height="60" x="120" y="220"/></g><g data-mml-node="mo" transform="translate(7634.7,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mn" transform="translate(8690.5,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(500,0)"/></g><g data-mml-node="mtext" transform="translate(9690.5,0)"><path data-c="4D" d="M132 622Q125 629 121 631T105 634T62 637H29V683H135Q221 683 232 682T249 675Q250 674 354 398L458 124L562 398Q666 674 668 675Q671 681 683 682T781 683H887V637H854Q814 636 803 634T785 622V61Q791 51 802 49T854 46H887V0H876Q855 3 736 3Q605 3 596 0H585V46H618Q660 47 669 49T688 61V347Q688 424 688 461T688 546T688 613L687 632Q454 14 450 7Q446 1 430 1T410 7Q409 9 292 316L176 624V606Q175 588 175 543T175 463T175 356L176 86Q187 50 261 46H278V0H269Q254 3 154 3Q52 3 37 0H29V46H46Q78 48 98 56T122 69T132 86V622Z"/><path data-c="48" d="M128 622Q121 629 117 631T101 634T58 637H25V683H36Q57 680 180 680Q315 680 324 683H335V637H302Q262 636 251 634T233 622L232 500V378H517V622Q510 629 506 631T490 634T447 637H414V683H425Q446 680 569 680Q704 680 713 683H724V637H691Q651 636 640 634T622 622V61Q628 51 639 49T691 46H724V0H713Q692 3 569 3Q434 3 425 0H414V46H447Q489 47 498 49T517 61V332H232V197L233 61Q239 51 250 49T302 46H335V0H324Q303 3 180 3Q45 3 36 0H25V46H58Q100 47 109 49T128 61V622Z" transform="translate(917,0)"/><path data-c="7A" d="M42 263Q44 270 48 345T53 423V431H393Q399 425 399 415Q399 403 398 402L381 378Q364 355 331 309T265 220L134 41L182 40H206Q254 40 283 46T331 77Q352 105 359 185L361 201Q361 202 381 202H401V196Q401 195 393 103T384 6V0H209L34 1L31 3Q28 8 28 17Q28 30 29 31T160 210T294 394H236Q169 393 152 388Q127 382 113 367Q89 344 82 264V255H42V263Z" transform="translate(1667,0)"/></g></g></g></svg></mjx-container></span></p><p>这个25MHz看起来是不是不太高？离Table1上标注的最高125MHz还差得远？这是由于除数这个20比较大。如果我们把PLLdivider ratio改到下限4<sub>10</sub>，那么外界信号的频率范围就会是：</p><p><span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.552ex;" xmlns="http://www.w3.org/2000/svg" width="29.342ex" height="4.627ex" role="img" focusable="false" viewbox="0 -1359 12969.2 2045"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/></g><g data-mml-node="TeXAtom" transform="translate(523,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(878,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(1223,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g></g></g><g data-mml-node="mo" transform="translate(2139.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mfrac" transform="translate(3195.6,0)"><g data-mml-node="mrow" transform="translate(220,676)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(500,0)"/><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(1000,0)"/></g><g data-mml-node="mtext" transform="translate(1500,0)"><path data-c="4D" d="M132 622Q125 629 121 631T105 634T62 637H29V683H135Q221 683 232 682T249 675Q250 674 354 398L458 124L562 398Q666 674 668 675Q671 681 683 682T781 683H887V637H854Q814 636 803 634T785 622V61Q791 51 802 49T854 46H887V0H876Q855 3 736 3Q605 3 596 0H585V46H618Q660 47 669 49T688 61V347Q688 424 688 461T688 546T688 613L687 632Q454 14 450 7Q446 1 430 1T410 7Q409 9 292 316L176 624V606Q175 588 175 543T175 463T175 356L176 86Q187 50 261 46H278V0H269Q254 3 154 3Q52 3 37 0H29V46H46Q78 48 98 56T122 69T132 86V622Z"/><path data-c="48" d="M128 622Q121 629 117 631T101 634T58 637H25V683H36Q57 680 180 680Q315 680 324 683H335V637H302Q262 636 251 634T233 622L232 500V378H517V622Q510 629 506 631T490 634T447 637H414V683H425Q446 680 569 680Q704 680 713 683H724V637H691Q651 636 640 634T622 622V61Q628 51 639 49T691 46H724V0H713Q692 3 569 3Q434 3 425 0H414V46H447Q489 47 498 49T517 61V332H232V197L233 61Q239 51 250 49T302 46H335V0H324Q303 3 180 3Q45 3 36 0H25V46H58Q100 47 109 49T128 61V622Z" transform="translate(917,0)"/><path data-c="7A" d="M42 263Q44 270 48 345T53 423V431H393Q399 425 399 415Q399 403 398 402L381 378Q364 355 331 309T265 220L134 41L182 40H206Q254 40 283 46T331 77Q352 105 359 185L361 201Q361 202 381 202H401V196Q401 195 393 103T384 6V0H209L34 1L31 3Q28 8 28 17Q28 30 29 31T160 210T294 394H236Q169 393 152 388Q127 382 113 367Q89 344 82 264V255H42V263Z" transform="translate(1667,0)"/></g></g><g data-mml-node="mn" transform="translate(1775.5,-686)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"/></g><rect width="3811" height="60" x="120" y="220"/></g><g data-mml-node="mo" transform="translate(7524.4,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mn" transform="translate(8580.2,0)"><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z"/><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(500,0)"/><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(1000,0)"/><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z" transform="translate(1278,0)"/><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(1778,0)"/></g><g data-mml-node="mtext" transform="translate(10858.2,0)"><path data-c="4D" d="M132 622Q125 629 121 631T105 634T62 637H29V683H135Q221 683 232 682T249 675Q250 674 354 398L458 124L562 398Q666 674 668 675Q671 681 683 682T781 683H887V637H854Q814 636 803 634T785 622V61Q791 51 802 49T854 46H887V0H876Q855 3 736 3Q605 3 596 0H585V46H618Q660 47 669 49T688 61V347Q688 424 688 461T688 546T688 613L687 632Q454 14 450 7Q446 1 430 1T410 7Q409 9 292 316L176 624V606Q175 588 175 543T175 463T175 356L176 86Q187 50 261 46H278V0H269Q254 3 154 3Q52 3 37 0H29V46H46Q78 48 98 56T122 69T132 86V622Z"/><path data-c="48" d="M128 622Q121 629 117 631T101 634T58 637H25V683H36Q57 680 180 680Q315 680 324 683H335V637H302Q262 636 251 634T233 622L232 500V378H517V622Q510 629 506 631T490 634T447 637H414V683H425Q446 680 569 680Q704 680 713 683H724V637H691Q651 636 640 634T622 622V61Q628 51 639 49T691 46H724V0H713Q692 3 569 3Q434 3 425 0H414V46H447Q489 47 498 49T517 61V332H232V197L233 61Q239 51 250 49T302 46H335V0H324Q303 3 180 3Q45 3 36 0H25V46H58Q100 47 109 49T128 61V622Z" transform="translate(917,0)"/><path data-c="7A" d="M42 263Q44 270 48 345T53 423V431H393Q399 425 399 415Q399 403 398 402L381 378Q364 355 331 309T265 220L134 41L182 40H206Q254 40 283 46T331 77Q352 105 359 185L361 201Q361 202 381 202H401V196Q401 195 393 103T384 6V0H209L34 1L31 3Q28 8 28 17Q28 30 29 31T160 210T294 394H236Q169 393 152 388Q127 382 113 367Q89 344 82 264V255H42V263Z" transform="translate(1667,0)"/></g></g></g></svg></mjx-container></span></p><p><span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.552ex;" xmlns="http://www.w3.org/2000/svg" width="27.831ex" height="4.627ex" role="img" focusable="false" viewbox="0 -1359 12301.5 2045"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/></g><g data-mml-node="TeXAtom" transform="translate(523,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(878,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="mi" transform="translate(1407,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g></g></g><g data-mml-node="mo" transform="translate(2250.1,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mfrac" transform="translate(3305.9,0)"><g data-mml-node="mrow" transform="translate(220,676)"><g data-mml-node="mn"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"/><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"/><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1000,0)"/></g><g data-mml-node="mtext" transform="translate(1500,0)"><path data-c="4D" d="M132 622Q125 629 121 631T105 634T62 637H29V683H135Q221 683 232 682T249 675Q250 674 354 398L458 124L562 398Q666 674 668 675Q671 681 683 682T781 683H887V637H854Q814 636 803 634T785 622V61Q791 51 802 49T854 46H887V0H876Q855 3 736 3Q605 3 596 0H585V46H618Q660 47 669 49T688 61V347Q688 424 688 461T688 546T688 613L687 632Q454 14 450 7Q446 1 430 1T410 7Q409 9 292 316L176 624V606Q175 588 175 543T175 463T175 356L176 86Q187 50 261 46H278V0H269Q254 3 154 3Q52 3 37 0H29V46H46Q78 48 98 56T122 69T132 86V622Z"/><path data-c="48" d="M128 622Q121 629 117 631T101 634T58 637H25V683H36Q57 680 180 680Q315 680 324 683H335V637H302Q262 636 251 634T233 622L232 500V378H517V622Q510 629 506 631T490 634T447 637H414V683H425Q446 680 569 680Q704 680 713 683H724V637H691Q651 636 640 634T622 622V61Q628 51 639 49T691 46H724V0H713Q692 3 569 3Q434 3 425 0H414V46H447Q489 47 498 49T517 61V332H232V197L233 61Q239 51 250 49T302 46H335V0H324Q303 3 180 3Q45 3 36 0H25V46H58Q100 47 109 49T128 61V622Z" transform="translate(917,0)"/><path data-c="7A" d="M42 263Q44 270 48 345T53 423V431H393Q399 425 399 415Q399 403 398 402L381 378Q364 355 331 309T265 220L134 41L182 40H206Q254 40 283 46T331 77Q352 105 359 185L361 201Q361 202 381 202H401V196Q401 195 393 103T384 6V0H209L34 1L31 3Q28 8 28 17Q28 30 29 31T160 210T294 394H236Q169 393 152 388Q127 382 113 367Q89 344 82 264V255H42V263Z" transform="translate(1667,0)"/></g></g><g data-mml-node="mn" transform="translate(1775.5,-686)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"/></g><rect width="3811" height="60" x="120" y="220"/></g><g data-mml-node="mo" transform="translate(7634.7,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mn" transform="translate(8690.5,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)"/><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(1000,0)"/></g><g data-mml-node="mtext" transform="translate(10190.5,0)"><path data-c="4D" d="M132 622Q125 629 121 631T105 634T62 637H29V683H135Q221 683 232 682T249 675Q250 674 354 398L458 124L562 398Q666 674 668 675Q671 681 683 682T781 683H887V637H854Q814 636 803 634T785 622V61Q791 51 802 49T854 46H887V0H876Q855 3 736 3Q605 3 596 0H585V46H618Q660 47 669 49T688 61V347Q688 424 688 461T688 546T688 613L687 632Q454 14 450 7Q446 1 430 1T410 7Q409 9 292 316L176 624V606Q175 588 175 543T175 463T175 356L176 86Q187 50 261 46H278V0H269Q254 3 154 3Q52 3 37 0H29V46H46Q78 48 98 56T122 69T132 86V622Z"/><path data-c="48" d="M128 622Q121 629 117 631T101 634T58 637H25V683H36Q57 680 180 680Q315 680 324 683H335V637H302Q262 636 251 634T233 622L232 500V378H517V622Q510 629 506 631T490 634T447 637H414V683H425Q446 680 569 680Q704 680 713 683H724V637H691Q651 636 640 634T622 622V61Q628 51 639 49T691 46H724V0H713Q692 3 569 3Q434 3 425 0H414V46H447Q489 47 498 49T517 61V332H232V197L233 61Q239 51 250 49T302 46H335V0H324Q303 3 180 3Q45 3 36 0H25V46H58Q100 47 109 49T128 61V622Z" transform="translate(917,0)"/><path data-c="7A" d="M42 263Q44 270 48 345T53 423V431H393Q399 425 399 415Q399 403 398 402L381 378Q364 355 331 309T265 220L134 41L182 40H206Q254 40 283 46T331 77Q352 105 359 185L361 201Q361 202 381 202H401V196Q401 195 393 103T384 6V0H209L34 1L31 3Q28 8 28 17Q28 30 29 31T160 210T294 394H236Q169 393 152 388Q127 382 113 367Q89 344 82 264V255H42V263Z" transform="translate(1667,0)"/></g></g></g></svg></mjx-container></span></p><p>这个频率看起来就高多了。在实际应用中，我们可以根据实际输入的信号频率来调整这个PLLdividerratio的取值，找到一个合适的范围。如果频率非常低，甚至低于前面那个12.75MHz，也可以把VCOgain control bit改为0，这样被除数就会从255-500MHz降低到100-160MHz。</p><p>言归正传，我们现在用一个最粗暴的方法先来尝试一下信号同步。既然板上的晶振跑在25MHz，那我们就把跳线帽从接晶振改接为接SMA接口，然后用信号源给一个25MHz信号，编程让DDS也输出一个25MHz的信号，按理说这个合成的25MHz应该和外界参考25MHz同步。但是放到示波器上却发现波形在缓慢移动，并且速度还很均匀，没有左右来回晃动或者时快时慢，而是均匀缓慢地移动。这说明我们输出的波形虽然是“来源于”外部参考信号，但是设置的频率并没有设得跟外部参考信号完全一致。</p><p>为了解决这个问题，我们来看一下，当我们在代码中“设置频率”的时候，我们到底在做什么？下面贴一下我拿到的原始代码片段：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief Writes the frequency value to the specified channel.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param Channel The channel number to write the frequency to.(0 to 3)</span></span><br><span class="line"><span class="comment"> * @param Freq The frequency value to be written.(1 to 500000000)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Write_Frequence</span><span class="params">(<span class="type">uint8_t</span> Channel, <span class="type">uint32_t</span> Freq)</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">if</span> (Freq &gt; <span class="number">500000000</span> || Freq &lt; <span class="number">1</span>)</span><br><span class="line">    {</span><br><span class="line">        Freq = <span class="number">114514</span>;</span><br><span class="line">        AD9959_error();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span> CFTW0_DATA[<span class="number">4</span>] = {<span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>};</span><br><span class="line">    Freq2Word(Freq, CFTW0_DATA);</span><br><span class="line">    Channel_Select(Channel);</span><br><span class="line">    WriteData_AD9959(CFTW0_ADD, <span class="number">4</span>, CFTW0_DATA); <span class="comment">// CTW0 address 0x04.Output CH0 setting frequency</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>这段代码是我们直接调用的函数，里面只有一个检查频率范围是否正确，不正确的话调用一个错误函数，然后把频率转化为频率字，再选择通道，写寄存器。选择通道和写寄存器的过程大概率不会有问题，那么关键问题就是这个Freq2Word的过程中发生了什么。按F12跳转到定义发现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Freq2Word</span><span class="params">(<span class="type">double</span> f, <span class="type">uint8_t</span> *fWord)</span></span><br><span class="line">{</span><br><span class="line">    <span class="comment">// fWord 4 bytes</span></span><br><span class="line">    <span class="type">uint32_t</span> Temp;</span><br><span class="line">    Temp = (<span class="type">uint32_t</span>)f * <span class="number">8.589934592</span>; </span><br><span class="line">    <span class="comment">// The input frequency factor is divided into four bytes.  8.589934592=(2^32)/500000000</span></span><br><span class="line">    fWord[<span class="number">3</span>] = (<span class="type">uint8_t</span>)Temp;</span><br><span class="line">    fWord[<span class="number">2</span>] = (<span class="type">uint8_t</span>)(Temp &gt;&gt; <span class="number">8</span>);</span><br><span class="line">    fWord[<span class="number">1</span>] = (<span class="type">uint8_t</span>)(Temp &gt;&gt; <span class="number">16</span>);</span><br><span class="line">    fWord[<span class="number">0</span>] = (<span class="type">uint8_t</span>)(Temp &gt;&gt; <span class="number">24</span>);</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>也就是说他把我们的频率（浮点型）直接乘以一个神秘系数，然后取整赋值到4个byte的数据。这个神秘系数的来源写在了注释里（谢天谢地他写了注释），是<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.816ex;" xmlns="http://www.w3.org/2000/svg" width="5.077ex" height="3.041ex" role="img" focusable="false" viewbox="0 -983.7 2243.8 1344.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="msup" transform="translate(665.8,394) scale(0.707)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"/><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)"/></g></g></g><g data-mml-node="mrow" transform="translate(220,-345) scale(0.707)"><g data-mml-node="mn"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"/><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"/><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1000,0)"/></g><g data-mml-node="mi" transform="translate(1500,0)"><path data-c="1D440" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"/></g></g><rect width="2003.8" height="60" x="120" y="220"/></g></g></g></svg></mjx-container></span>，这个500M熟不熟悉？就是刚刚的25MHz晶振20倍频之后得到的500MHz，也就是DDS主频。也就是说DDS会把0到主频这个频率范围映射到频率字的<span class="math inline">0 − 2<sup>32</sup></span>上。</p><p>那么这时我们的输出频率无法跟输入的25MHz完全同步的原因也就很显然了：<span class="math display">25 × 10<sup>6</sup> × 8.589934592 = 214748364.8</span>，在取整到整型的时候会损失掉0.8。那么是不是我们用整数除法代替这个神秘的浮点乘法就能解决这个问题呢？其实不然。尝试<span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.602ex;" xmlns="http://www.w3.org/2000/svg" width="27.41ex" height="4.676ex" role="img" focusable="false" viewbox="0 -1359 12115.1 2067"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g><g data-mml-node="TeXAtom" transform="translate(533,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"/><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)"/></g></g></g><g data-mml-node="mo" transform="translate(1512.3,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"/></g><g data-mml-node="mfrac" transform="translate(2512.6,0)"><g data-mml-node="mrow" transform="translate(470,676)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(500,0)"/></g><g data-mml-node="mi" transform="translate(1000,0)"><path data-c="1D440" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"/></g></g><g data-mml-node="mrow" transform="translate(220,-686)"><g data-mml-node="mn"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"/><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"/><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1000,0)"/></g><g data-mml-node="mi" transform="translate(1500,0)"><path data-c="1D440" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"/></g></g><rect width="2751" height="60" x="120" y="220"/></g><g data-mml-node="mo" transform="translate(5781.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mn" transform="translate(6837.1,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(500,0)"/><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z" transform="translate(1000,0)"/><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z" transform="translate(1500,0)"/><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z" transform="translate(2000,0)"/><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z" transform="translate(2500,0)"/><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" transform="translate(3000,0)"/><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" transform="translate(3500,0)"/><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z" transform="translate(4000,0)"/><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(4500,0)"/><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z" transform="translate(4778,0)"/></g></g></g></svg></mjx-container></span>，结果和刚才完全一样。也就是说，这个取整损失0.8的问题并不是由浮点乘法带来的，而是2<sup>32</sup>本就无法被20整除，问题的关键在于我们的PLLdivider ratio取了20，不是一个2<sup>32</sup>能够整除的数。</p><p>那么问题的解决办法也很显然了：就像之前降主频的时候做的一样，这里我们把PLLdividerratio调整到16（为了能被2<sup>32</sup>整除，只能取4，8，16这三种），然后在Freq2Word的时候给神秘系数额外乘上2.5，就可以同步上了。为了将PLLdivider ratio 改为16，那么FR1寄存器应该是0b1 10000 110000…=0xC30000。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">uint8_t</span> FR1_DATA[<span class="number">3</span>] = {<span class="number">0xC3</span>, <span class="number">0x00</span>, <span class="number">0x00</span>}; <span class="comment">// 16 frequency doubling</span></span><br><span class="line"><span class="type">uint8_t</span> CFR_DATA[<span class="number">3</span>] = {<span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x00</span>}; <span class="comment">// default Value = 0x000302</span></span><br><span class="line">_Init_AD9959_GPIO();</span><br><span class="line">InitIO_9959();</span><br><span class="line">InitReset();</span><br><span class="line"></span><br><span class="line">WriteData_AD9959(FR1_ADD, <span class="number">3</span>, FR1_DATA);</span><br><span class="line">WriteData_AD9959(CFR_ADD, <span class="number">3</span>, CFR_DATA);</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Freq2Word</span><span class="params">(<span class="type">double</span> f, <span class="type">uint8_t</span> *fWord)</span></span><br><span class="line">{</span><br><span class="line">    <span class="comment">// fWord 4 bytes</span></span><br><span class="line">    <span class="type">uint32_t</span> Temp;</span><br><span class="line">    Temp = (<span class="type">uint32_t</span>)f * <span class="number">8.589934592</span> * <span class="number">2.5</span>; <span class="comment">// The input frequency factor is divided into four bytes.  8.589934592=(2^32)/500000000</span></span><br><span class="line">    fWord[<span class="number">3</span>] = (<span class="type">uint8_t</span>)Temp;</span><br><span class="line">    fWord[<span class="number">2</span>] = (<span class="type">uint8_t</span>)(Temp &gt;&gt; <span class="number">8</span>);</span><br><span class="line">    fWord[<span class="number">1</span>] = (<span class="type">uint8_t</span>)(Temp &gt;&gt; <span class="number">16</span>);</span><br><span class="line">    fWord[<span class="number">0</span>] = (<span class="type">uint8_t</span>)(Temp &gt;&gt; <span class="number">24</span>);</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>缓慢调整信号源提供的外部信号频率，可以发现DDS输出频率也在跟着变，并且在示波器上两个波形相对静止还挺稳定的，效果还是不错的。</p><p>同步上了非常高兴，晚上美美下班。然而第二天过来再测了一下发现天塌了。虽然确实能同步上了，但是输出信号与输入信号的相位差略显随机。每次重启都会显示出不同的相位差，并且固定在-98度，-8度，+82度，+172度这四种取值附近随机刷新一个（可恶的倍频器！）。于是当天的任务就变成了怎么把相位也同步上。</p><p>AD9959是可以设置输出信号的相位的，并且是0-359度可调，步进1度。如果能让单片机知道目前的相位差是多少，那么要调整过去就很简单了。那么接下来的事情就很明显了：用一个鉴相器输出REFCLK和OUTPUT之间的相位差（一般是映射到直流电平上），用ADC采集这个直流电平，然后调整回去。</p><p>从隔壁组借来一个鉴相器，用信号源和示波器先简单测一下，发现相位差越小输出电平越高，范围大概是40mV-1.9V，可以直接拿ADC采集。czq同学反复告诫我输入的信号强度不能超过0dbm，换算一下大概是300mV的VPeak，而AD9959的Table1给出的范围是200mV-1000mV，也还算是在范围内，能用。</p><p>把电路接好：信号源给出参考信号同时接到示波器通道1，DDS的REFCLK，以及鉴相器的一个输入端；DDS的输出端接到示波器的通道2以及鉴相器的另一个输入端；鉴相器的输出端接到单片机的ADC上。再简单编一个程序，demo里就粗暴一点把360个相位全遍历一遍，用ADC检测哪个相位时电平最高就把哪个相位记录下来就行。</p><p>尝试跑了一下，发现每次输出都有一个固定的20度相位差，并且重启单片机也不会改变；在单片机上打印了一下检测到的最高电平，倒也确实是1.9V左右。<del>反正是在做工程不是搞学术，也顾不得那么多了，直接手动给他加上个20度。</del>再稍微改进了一下代码，遍历360个相位也太慢了，根据ADC检测到的信号大小可以反馈调节，ADC检测到电平比较低的时候可以步子迈大一点嘛直接跳过去，然后再加一个遍历次数的限制，最终程序就写好了：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">   <span class="type">uint16_t</span> max=<span class="number">0</span>, temp=<span class="number">0</span>, i=<span class="number">0</span>, cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (max&lt;<span class="number">2500</span> &amp;&amp; cnt&lt;<span class="number">50</span>) {</span><br><span class="line">Write_Phase(<span class="number">1</span>, i);</span><br><span class="line">AD9959_IO_Update();</span><br><span class="line">delay_ms(<span class="number">10</span>);</span><br><span class="line">temp=Get_Adc_Average(ADC_CHANNEL_0, <span class="number">20</span>);</span><br><span class="line"><span class="keyword">if</span> (max&lt;temp) {</span><br><span class="line">max=temp;</span><br><span class="line">phase0=i;</span><br><span class="line">}</span><br><span class="line">i+=<span class="number">60</span>*(<span class="number">2500</span>-temp)/<span class="number">2500</span>;</span><br><span class="line">i%=<span class="number">360</span>;</span><br><span class="line">cnt+=<span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//phase0+=26;</span></span><br><span class="line">phase0+=<span class="number">20</span>;</span><br><span class="line">phase0%=<span class="number">360</span>;</span><br><span class="line"></span><br><span class="line">Write_Phase(<span class="number">1</span>, phase0);</span><br><span class="line">AD9959_IO_Update();</span><br><span class="line">LCD_ShowString(<span class="number">0</span>, lcddev.height<span class="number">-40</span>, <span class="number">320</span>, <span class="number">32</span>, <span class="number">32</span>, (u8*)<span class="string">"synchronized!"</span>);</span><br></pre></td></tr></table></figure><p>最终实现的效果也还是不错的，详见测试视频</p><details class="lake-collapse"><summary id="ue6012e39"><span class="ne-text">测试视频在此……吗？</span></summary><p id="ua70eb212" class="ne-p"><span class="ne-text">……本来想上传视频的结果语雀上传视频要会员，那算了。</span><span class="ne-text" style="text-decoration: line-through">吃大份去吧语雀</span></p></details>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;食用清单：正点原子探索者开发板v2.2，主控STM32F407ZGT6，DDS模块AD9959（康威科技）&lt;/p&gt;
&lt;p&gt;07月19日&lt;/p&gt;
&lt;p&gt;前天晚上实现了高频信号同步，昨天晚上实现了相位可控。&lt;/p&gt;
&lt;p&gt;原理上很简单：使用外部高频信号取代DDS上的晶振，</summary>
      
    
    
    
    <category term="EE" scheme="https://loveapple.icu/categories/EE/"/>
    
    
    <category term="NUEDC" scheme="https://loveapple.icu/tags/NUEDC/"/>
    
    <category term="DDS" scheme="https://loveapple.icu/tags/DDS/"/>
    
  </entry>
  
  <entry>
    <title>NUEDC-2022-F</title>
    <link href="https://loveapple.icu/2025/07/05/NUEDC-2022-F/"/>
    <id>https://loveapple.icu/2025/07/05/NUEDC-2022-F/</id>
    <published>2025-07-05T03:41:00.000Z</published>
    <updated>2025-08-12T03:17:57.509Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2025/07/05/NUEDC-2022-F/topic.jpeg"></p><p>增加额外要求：AM载波取消500kHz步进限制，可能是10M-30M任意频率</p><p>07月05日</p><p>AM波</p><p>技术路线</p><p>测量任务：使用单片机GPIO口结合定时器读取载波频率，然后用DDS产生比载波频率略低的本振进行混频，混到低频区后进行低通滤波结合ADC采集，进行FFT，然后找到三个峰值即可计算调制频率与调制深度；</p><p>解调任务：使用包络检波解调AM波确保波形同源。</p><p>测量任务深入：单片机GPIO口读取采用定时器计数器输入，只能读取高低电平，因此使用高速比较器将AM载波转化成与载波同频的方波再进行测量；又由于AM调制会有一部分幅度过低，比较器可能无法比较，因此使用74HC4046锁相环先将载波频率进行锁定再比较。</p><p>实测效果</p><p>载波频率：将理想正弦波（假设锁相环已锁定）输入比较器，比较器波形输出至单片机定时计数器的外部触发接口，载波频率测量可测DC-30M+，经过参数调试误差为10Hz数量级；如果将调幅波直接输入至比较器，最高可到0.8调制深度；经过一级放大，最高可至0.98调制深度。</p><p>DDS：写了一个可自由调试的UI，包括点频扫频，可自由调整频率与幅度；缺陷：DDS有时会无响应或错误响应，需要重新发送指令，有时甚至需要重启单片机；产生波形略有失真，可能是阻抗匹配问题（示波器FFT查看，除主频外最大谐波相对幅度-28dB）。</p><p>ADC&amp;FFT：调制频率由于频域分辨率x的影响会有十来赫兹的误差，但是由于步进是1kHz所以可以直接取整解决；调制深度计算还需要调试一下参数，总的来说还是正相关的。如果不做任何处理直接FFT，当调制深度低于30%的时候可能会产生信噪比过低，边带被噪声淹没的问题；编写了一个频域上比较严格的滤除算法之后，可以探测到低至约6%的调制深度。</p><p>07月10日</p><p>AM的测试有点困难，主要是调制深度达到1.0时载波频率会有差不多20kHz的误差，导致之前的混频到10.7kHz的技术方案不太可行，决定改为混频到约50kHz，用更高的采样率去采集。</p><p>今日先测通了FM路线。</p><p>载波频率：锁相环锁定范围3-8.5MHz，使用34MHz起始，-4MHz步进本振进行混频后递交给锁相环，以4-8MHz作为有效锁定频段，利用定时器计数器统计脉冲数计算锁定频率反推载波频率，误差10Hz数量级。</p><p>调制频率，调制系数，最大频偏：利用锁相环鉴频器进行FM解调，使用ADC采集解调波形，计算极大值均值与极小值均值作差，进行FFT提取主频率，进而利用Excel的预测线功能拟合计算调制系数，发现不同采集轮次之间波动较大，采用新旧值1：3加权平均的方式进行稳定，误差基本在0.2以内。</p><p>代码调试小技巧：当最终版代码需要全自动化运行，而你又需要先进行调试时，在自动化代码中加入</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">LCD_ShowString(<span class="number">0</span>, <span class="number">0</span>, <span class="number">160</span>, <span class="number">32</span>, <span class="number">32</span>, (u8*)<span class="string">"waiting"</span>);</span><br><span class="line">key=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (key!=KEY0_PRES) {</span><br><span class="line">key=KEY_Scan(<span class="number">0</span>);</span><br><span class="line">}</span><br><span class="line">key=<span class="number">0</span>;</span><br><span class="line">LCD_Fill(<span class="number">0</span>, <span class="number">0</span>, lcddev.width, lcddev.height, GRED);</span><br></pre></td></tr></table></figure><p>以及更多LCD_Show系列代码，以达到单步调试的目的。（按KEY0进行下一步）</p><p>07月11日</p><p>将整个系统调通了。</p><p>锁相环的锁定频率存在欺骗行为：在大约3<sub>10MHz能正常锁定，在大约10</sub>12MHz<strong>输出的锁定频率随输入频率增加而下降</strong>，而我们检测只能检测锁相环的输出频率（利用定时器计数器），因此我们即使接收到3<sub>10MHz的锁定信号，我们也不能确定锁相环的输入信号就是同频率信号还是10</sub>12MHz的“欺骗信号”。解决方法是：我们规定4<sub>8MHz为有效锁定范围；由于待测信号载波频率范围为10</sub>30MHz，因此我们将DDS本振从38MHz开始向下以1MHz为步进推进直到14MHz为止（共计25个频点），混频后交给锁相环尝试锁定，依然使用单片机的定时器计数器测量锁相环的输出频率，以推算出的载波频率连续三次在误差范围内近似相同为判定载波频率的依据。具体代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">         success_cnt=<span class="number">0</span>;</span><br><span class="line">round_cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">25</span>; i+=<span class="number">1</span>) {</span><br><span class="line">dds_rate=<span class="number">38</span>*MHz-(<span class="type">uint32_t</span>)i*MHz;</span><br><span class="line">DDS_data_stack.freq1[<span class="number">0</span>]=dds_rate;</span><br><span class="line">DDS_data_stack.channel_state[<span class="number">0</span>]=CHANNEL_STATE_SINGLE;</span><br><span class="line">dds_task((DDS_data*)&amp;DDS_data_stack);</span><br><span class="line"><span class="comment">// LCD_ShowNum(0, 240, dds_rate, 9, 32);</span></span><br><span class="line">ChangeSwitchState(Switch_mlt, Swch_mlt_base);</span><br><span class="line">LCD_ShowString(<span class="number">0</span>, lcddev.height<span class="number">-40</span>, <span class="number">400</span>, <span class="number">32</span>, <span class="number">32</span>, (u8*)<span class="string">"Counting Frequency...   "</span>);</span><br><span class="line">delay_ms(<span class="number">50</span>);</span><br><span class="line">HAL_TIM_Base_Start_IT(&amp;htim4);</span><br><span class="line">delay_ms(<span class="number">300</span>);</span><br><span class="line">HAL_TIM_Base_Stop_IT(&amp;htim4);</span><br><span class="line"><span class="keyword">if</span> (base_freq&gt;<span class="number">3.8</span>*MHz &amp;&amp; base_freq&lt;<span class="number">8.2</span>*MHz) {</span><br><span class="line"><span class="type">uint32_t</span> temp=dds_rate-base_freq;</span><br><span class="line"><span class="comment">// LCD_ShowNum(160, 500, temp, 9, 32);</span></span><br><span class="line"><span class="comment">// LCD_ShowNum(160, 460, fm_base_freq, 9, 32);</span></span><br><span class="line"><span class="keyword">if</span> (success_cnt==<span class="number">0</span>) {</span><br><span class="line">fm_base_freq=temp;</span><br><span class="line">success_cnt=<span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (abs_minus(fm_base_freq, temp)&lt;<span class="number">250</span>*kHz) {</span><br><span class="line"><span class="comment">// LCD_ShowNum(160, 540, abs_minus(fm_base_freq, temp), 9, 32);</span></span><br><span class="line">fm_base_freq=temp;</span><br><span class="line">success_cnt+=<span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span> {</span><br><span class="line">success_cnt=<span class="number">1</span>;</span><br><span class="line">fm_base_freq=temp;</span><br><span class="line">}</span><br><span class="line"><span class="comment">// LCD_ShowNum(120, 500, success_cnt, 1, 32);</span></span><br><span class="line"><span class="keyword">if</span> (success_cnt==<span class="number">3</span>) {</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span> {</span><br><span class="line">success_cnt=<span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">// LCD_ShowString(0, 0, 160, 32, 32, (u8*)"waiting");</span></span><br><span class="line"><span class="comment">// while (key!=KEY0_PRES) {</span></span><br><span class="line"><span class="comment">// key=KEY_Scan(0);</span></span><br><span class="line"><span class="comment">// }</span></span><br><span class="line"><span class="comment">// key=0;</span></span><br><span class="line"><span class="comment">// LCD_Fill(0, 0, lcddev.width, lcddev.height, GRED);</span></span><br><span class="line">}</span><br><span class="line"><span class="type">uint32_t</span> temp2=fm_base_freq-fm_base_freq%(<span class="number">500</span>*kHz);</span><br><span class="line"><span class="keyword">if</span> (fm_base_freq-temp2&gt;<span class="number">250</span>*kHz) </span><br><span class="line">temp2+=<span class="number">500</span>*kHz;</span><br><span class="line">fm_base_freq=temp2; </span><br></pre></td></tr></table></figure><p>由于赛题中对FM有500kHz步进的规定，因此我们将测得的频率直接拟合到最近的500kHz整数倍频即可。对于AM去掉最后47~50行，会有大约几十kHz的误差。为了准确测得AM的频率，我们将AM混频到大约80kHz处，使用300kHz的采样率进行ADC采集，再进行FFT，找到主带频率反推AM频率，误差可降低到0.1kHz以内。</p><p>今日花了较多时间用来调试代码的自动化测试流程。目前的代码架构逻辑大致如下：</p><p><img src="/2025/07/05/NUEDC-2022-F/yuque_mind.jpeg"></p><p><img src="/2025/07/05/NUEDC-2022-F/yuque_mind.jpeg"></p><p>具体细节参看代码与代码注释。</p><p>本题的主要困难点在于对AM取消了500kHz步进限制，这样在AM调制深度较深时会较难获取到AM的载波频率，也就很难进行下一步测量。放大器+比较器然后用计数器计数的方案最高只能做到0.97左右的调制深度，到1.0之后就会有MHz级别的误差了，必须要采用锁相环才能稍微测准一点（10kHz数量级）；而锁相环的锁定范围又不可能覆盖10~30MHz整个带宽（在我们的硬件中，甚至完全不在这个带宽之内），因此要么用多个锁相环来回切换，要么选择进行混频后尝试锁定，多次尝试找到正确的频率。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2025/07/05/NUEDC-2022-F/topic.jpeg&quot;&gt;&lt;/p&gt;
&lt;p&gt;增加额外要求：AM载波取消500kHz步进限制，可能是10M-30M任意频率&lt;/p&gt;
&lt;p&gt;07月05日&lt;/p&gt;
&lt;p&gt;AM波&lt;/p&gt;
&lt;p&gt;技术路线&lt;/p</summary>
      
    
    
    
    <category term="EE" scheme="https://loveapple.icu/categories/EE/"/>
    
    
    <category term="NUEDC" scheme="https://loveapple.icu/tags/NUEDC/"/>
    
  </entry>
  
</feed>
